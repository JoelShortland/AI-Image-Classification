{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "fc4122b0",
      "metadata": {
        "id": "fc4122b0"
      },
      "source": [
        "# COMP4318/5318 Assignment 2: Image Classification"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "af9f508e",
      "metadata": {
        "id": "af9f508e"
      },
      "source": [
        "### Group number: 112  , SID1: 510612241 , SID2: 500497135\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e24652d1",
      "metadata": {
        "id": "e24652d1"
      },
      "source": [
        "This template notebook includes code to load the  dataset and a skeleton for the main sections that should be included in the notebook. Please stick to this struture for your submitted notebook.\n",
        "\n",
        "Please focus on making your code clear, with appropriate variable names and whitespace. Include comments and markdown text to aid the readability of your code where relevant. See the specification and marking criteria in the associated specification to guide you when completing your implementation."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fe1144e1",
      "metadata": {
        "id": "fe1144e1"
      },
      "source": [
        "## Setup and dependencies\n",
        "Please use this section to list and set up all your required libraries/dependencies and your plotting environment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "11ab0507",
      "metadata": {
        "id": "11ab0507"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "import pandas as pd\n",
        "from typing import List, Tuple\n",
        "import os\n",
        "import sklearn as sk\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "from sklearn.svm import SVC\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from scikeras.wrappers import KerasClassifier, KerasRegressor\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score\n",
        "from PIL import Image\n",
        "\n",
        "\n",
        "keras.backend.clear_session()\n",
        "tf.random.set_seed(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "B0WVyQqa5bXS",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 796
        },
        "id": "B0WVyQqa5bXS",
        "outputId": "2847a01f-4496-4978-ef61-c40b1afaffb9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikeras\n",
            "  Downloading scikeras-0.13.0-py3-none-any.whl (26 kB)\n",
            "Collecting keras>=3.2.0 (from scikeras)\n",
            "  Downloading keras-3.3.3-py3-none-any.whl (1.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting scikit-learn>=1.4.2 (from scikeras)\n",
            "  Downloading scikit_learn-1.4.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.1/12.1 MB\u001b[0m \u001b[31m77.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: absl-py in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->scikeras) (1.4.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->scikeras) (1.25.2)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->scikeras) (13.7.1)\n",
            "Collecting namex (from keras>=3.2.0->scikeras)\n",
            "  Downloading namex-0.0.8-py3-none-any.whl (5.8 kB)\n",
            "Requirement already satisfied: h5py in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->scikeras) (3.9.0)\n",
            "Collecting optree (from keras>=3.2.0->scikeras)\n",
            "  Downloading optree-0.11.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (311 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m311.2/311.2 kB\u001b[0m \u001b[31m35.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: ml-dtypes in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->scikeras) (0.2.0)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.4.2->scikeras) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.4.2->scikeras) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=1.4.2->scikeras) (3.5.0)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from optree->keras>=3.2.0->scikeras) (4.11.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->scikeras) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->scikeras) (2.16.1)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->scikeras) (0.1.2)\n",
            "Installing collected packages: namex, optree, scikit-learn, keras, scikeras\n",
            "  Attempting uninstall: scikit-learn\n",
            "    Found existing installation: scikit-learn 1.2.2\n",
            "    Uninstalling scikit-learn-1.2.2:\n",
            "      Successfully uninstalled scikit-learn-1.2.2\n",
            "  Attempting uninstall: keras\n",
            "    Found existing installation: keras 2.15.0\n",
            "    Uninstalling keras-2.15.0:\n",
            "      Successfully uninstalled keras-2.15.0\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.3.3 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed keras-3.3.3 namex-0.0.8 optree-0.11.0 scikeras-0.13.0 scikit-learn-1.4.2\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "keras",
                  "sklearn"
                ]
              },
              "id": "255fb24056fd42c081cd891ee2642c13"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "!pip install scikeras"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9bc35bce",
      "metadata": {
        "id": "9bc35bce"
      },
      "source": [
        "## 1. Data loading, exploration, and preprocessing\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7495a12e-9b9d-48f8-9d2a-abbd01c5a594",
      "metadata": {
        "id": "7495a12e-9b9d-48f8-9d2a-abbd01c5a594"
      },
      "source": [
        "Code to load the dataset is provided in the following cell. Please proceed with your data exploration and preprocessing in the remainder of this section."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a991e631",
      "metadata": {
        "id": "a991e631"
      },
      "outputs": [],
      "source": [
        "# Load the dataset training and test sets as numpy arrays\n",
        "# assuming Assignment2Data folder is present in the same directory\n",
        "# as the notebook\n",
        "X_train = np.load('Assignment2Data/X_train.npy')\n",
        "y_train = np.load('Assignment2Data/y_train.npy')\n",
        "X_test = np.load('Assignment2Data/X_test.npy')\n",
        "y_test = np.load('Assignment2Data/y_test.npy')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bn6Ncm6nxZpa",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 405
        },
        "id": "bn6Ncm6nxZpa",
        "outputId": "2ee9a7e3-4523-4870-803d-a0bb27a0efb6"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x480 with 40 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# This script displays a sample image for each unique label in our training dataset by:\n",
        "\n",
        "visualize_images(X_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1c2b48850a8561ae",
      "metadata": {
        "id": "1c2b48850a8561ae"
      },
      "source": [
        "one set of images looks way larger, maybe some balancing?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "OZGQ0jVn0WJV",
      "metadata": {
        "id": "OZGQ0jVn0WJV"
      },
      "outputs": [],
      "source": [
        "def plot_distribution(X_train, y_train, y_test, cols=4):\n",
        "    unique_labels = np.unique(y_train)\n",
        "    n_labels = len(unique_labels)\n",
        "    rows = (n_labels + cols - 1) // cols  # Calculate the number of rows needed\n",
        "\n",
        "    plt.figure(figsize=(20, 5 * rows))\n",
        "\n",
        "    for i, label in enumerate(unique_labels):\n",
        "        index = np.where(y_train == label)[0][0]\n",
        "        image = X_train[index]\n",
        "\n",
        "\n",
        "        plt.subplot(rows, cols, i + 1)\n",
        "        plt.imshow(image)\n",
        "        plt.title(f'Label: {label}', fontsize=24)\n",
        "        plt.axis('off')\n",
        "\n",
        "        train_examples = np.where(y_train == label)[0].size\n",
        "        test_examples = np.where(y_test == label)[0].size\n",
        "\n",
        "        print(f\"Number of examples for class {label}: training={train_examples}, test={test_examples}\")\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "rJNErY2oXYKu",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "rJNErY2oXYKu",
        "outputId": "d9ed0e9c-ffbc-475d-b80b-836611b09a13"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of examples for class 0: training=1741, test=436\n",
            "Number of examples for class 1: training=936, test=234\n",
            "Number of examples for class 2: training=916, test=229\n",
            "Number of examples for class 3: training=978, test=245\n",
            "Number of examples for class 4: training=1562, test=390\n",
            "Number of examples for class 5: training=1651, test=413\n",
            "Number of examples for class 6: training=4201, test=1050\n",
            "Number of examples for class 7: training=1519, test=380\n",
            "Number of examples for class 8: training=1546, test=386\n",
            "Number of examples for class 9: training=1682, test=420\n",
            "Number of examples for class 10: training=2196, test=549\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 2000x1500 with 11 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_distribution(X_train, y_train, y_test, cols=4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "XI1SkGTL0E3P",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XI1SkGTL0E3P",
        "outputId": "5316deaf-8646-4d85-d551-ecb6aeb57a3d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "X_train: (18928, 28, 28)\n",
            "y_train: (18928,)\n",
            "X_test: (4732, 28, 28)\n",
            "y_test: (4732,)\n",
            "[10  7  6  3  2  9 10  9  8  5  6  9  0  4  3  6  9  9  1  9  2  1  6  9\n",
            "  6  2  1  1  8 10]\n",
            "number of classes 11\n",
            "number of classes uint8\n",
            "unique classes [ 0  1  2  3  4  5  6  7  8  9 10]\n"
          ]
        }
      ],
      "source": [
        "# Print the size of the training and test data\n",
        "print(\"X_train:\",X_train.shape)\n",
        "print(\"y_train:\",y_train.shape)\n",
        "print(\"X_test:\",X_test.shape)\n",
        "print(\"y_test:\",y_test.shape)\n",
        "################\n",
        "print(y_train[0:30])\n",
        "print(\"number of classes\",len(np.unique(y_train)))\n",
        "print(\"number of classes\",(np.unique(y_train).dtype))\n",
        "print(\"unique classes\", np.unique(y_train))\n",
        "#print(X_train[0:1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "X83xOn5NYmNi",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "X83xOn5NYmNi",
        "outputId": "a18b9bf6-745c-4034-cd8b-d7b511c8d9bc"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAJOCAYAAABm7rQwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABuMElEQVR4nO3deVxUZf//8fcIsggMiMqWirjkviSaoWmaJBpali2Wd2q5tIClphmVa5Zmua+V3VKmt9ud1q0pIi6VkplG7t5pbqWAaYCagsL5/dGP+TqCiohnuOH1fDzmEXPONed8rnNmxnhznetYDMMwBAAAAAAAAJiojKMLAAAAAAAAQOlDKAUAAAAAAADTEUoBAAAAAADAdIRSAAAAAAAAMB2hFAAAAAAAAExHKAUAAAAAAADTEUoBAAAAAADAdIRSAAAAAAAAMB2hFAAAAAAAAExHKAUAJUi1atXUu3dvR5dxy0aNGiWLxWLKvtq2bau2bdvanm/cuFEWi0XLli0zZf+9e/dWtWrVTNnXlY4cOSKLxaLY2FjT930rLBaLRo0aVajXlpTPx/WY+dm5VVd/9nB9586dU9++fRUQECCLxaKBAwc6uqQS6Va+YwAAN49QCgD+Bxw6dEjPP/+8qlevLjc3N1mtVrVq1UpTp07VhQsXHF3edcXGxspisdgebm5uCgoKUkREhKZNm6azZ88WyX5OnDihUaNGKSkpqUi2V5SKc21F4epzfK2HI8I32MsNXQvyKAp79+7VqFGjdOTIkSLZXlGpVq2arZ9lypSRj4+PGjZsqP79+2vr1q23tO13331XK1asKJpCr9pubGysXnzxRc2fP1/PPPNMke/japcuXdK0adPUvHlzeXl5ydPTU82bN9e0adN06dKl277//yXF7b2+cOFCTZkyxdFlAMANOTu6AADA9a1atUqPP/64XF1d1bNnTzVo0EBZWVn67rvvNHToUO3Zs0cfffSRo8u8oTFjxigkJESXLl1ScnKyNm7cqIEDB2rSpEn66quv1KhRI1vbt956S6+//vpNbf/EiRMaPXq0qlWrpiZNmhT4dWvXrr2p/RTG9Wr7+OOPlZOTc9truFpwcLAuXLigsmXL3vK22rRpo/nz59st69u3r+6++27179/ftszT0/OW93XhwgU5Oxfuf18OHDigMmVK99/j6tatm+dcxcTEyNPTU2+++WaR72/v3r0aPXq02rZtmyeUNOOzdz1NmjTRq6++Kkk6e/as9u3bp6VLl+rjjz/WoEGDNGnSpEJt991339Vjjz2mrl27FmG10vr163XPPfdo5MiRRbrdazl//rwiIyO1adMmde7cWb1791aZMmW0Zs0avfLKK/riiy+0atUqeXh4mFJPcXe997ojLFy4ULt372ZEHYBij1AKAIqxw4cPq3v37goODtb69esVGBhoWxcVFaWDBw9q1apVDqyw4Dp16qRmzZrZnsfExGj9+vXq3LmzHnroIe3bt0/u7u6SJGdn50IHDwX1119/qVy5cnJxcbmt+7mRogiFCiN31FpRqF69uqpXr2637IUXXlD16tX1j3/845qvu3z5snJycm7qHNxKza6uroV+bUnh7++f55yMHz9eFStWvO65uh0c/dm744478vT5vffe09NPP63JkyerVq1aevHFFx1UXV6pqamqV69ekW3vRp+/wYMHa9OmTZo+fbqio6Nty1988UXNnDlT0dHRGjJkiGbPnn3NfeTk5CgrK6vIvmsAACVP6f5zIQAUcxMmTNC5c+f0ySef2AVSuWrWrKlXXnnlmq8/c+aMhgwZooYNG8rT01NWq1WdOnXSzz//nKft9OnTVb9+fZUrV07ly5dXs2bNtHDhQtv6s2fPauDAgapWrZpcXV3l5+enBx54QDt27Ch0/+6//34NHz5cR48e1eeff25bnt+8OPHx8br33nvl4+MjT09P1a5dW2+88Yakvy9Jat68uSTp2WeftV2WkztfUtu2bdWgQQNt375dbdq0Ubly5Wyvvda8NtnZ2XrjjTcUEBAgDw8PPfTQQzp+/Lhdm2vNUXTlNm9UW35zSp0/f16vvvqqqlSpIldXV9WuXVsffPCBDMOwa2exWBQdHa0VK1aoQYMGcnV1Vf369bVmzZr8D/gV8ptTqnfv3vL09NTvv/+url27ytPTU5UqVdKQIUOUnZ19w20WZH8ffPCBpkyZoho1asjV1VV79+5VVlaWRowYodDQUHl7e8vDw0OtW7fWhg0b8mzn6vlect8rBw8eVO/eveXj4yNvb289++yz+uuvv+xee/X5yr3scPPmzRo8eLAqVaokDw8PPfLIIzp16pTda3NycjRq1CgFBQWpXLlyateunfbu3Vvgeao++OADtWzZUhUqVJC7u7tCQ0PznbfsZs7pd999p+bNm8vNzU01atTQhx9+eMM6CiotLU0DBw60vQdr1qyp9957L8+ovkWLFik0NFReXl6yWq1q2LChpk6dKunv4/v4449Lktq1a2d772/cuFHStedzW7Jkid555x1VrlxZbm5uat++vQ4ePJinxpkzZ6p69epyd3fX3XffrW+//faW56lyd3fX/Pnz5evrq3feecfuM1eQc2ixWHT+/Hl9+umntv7mvj+OHj2ql156SbVr15a7u7sqVKigxx9//IaXe+Uel8OHD2vVqlW27ea+LjU1VX369JG/v7/c3NzUuHFjffrpp3bbuN7nLz+//fabPvnkE91///12gVSuqKgotWvXTnPnztVvv/1m1//o6GgtWLBA9evXl6urq+29u3PnTt13331yd3dX5cqVNXbsWM2bN8+uL5L05ZdfKjIyUkFBQXJ1dVWNGjX09ttv5/kOyv1e37t3r9q1a6dy5crpjjvu0IQJE657PHNlZmZq0KBBqlSpkry8vPTQQw/Z9SVXQc7bjd7rBe3TL7/8om7duikgIEBubm6qXLmyunfvrvT0dLt2n3/+uUJDQ+Xu7i5fX191797d7t+ntm3batWqVTp69CiXTwMo9hgpBQDF2H/+8x9Vr15dLVu2LNTrf/31V61YsUKPP/64QkJClJKSog8//FD33Xef9u7dq6CgIEl/X0L28ssv67HHHtMrr7yiixcvaufOndq6dauefvppSX+PfFm2bJmio6NVr149nT59Wt9995327dunpk2bFrqPzzzzjN544w2tXbtW/fr1y7fNnj171LlzZzVq1EhjxoyRq6urDh48qM2bN0v6+5KkMWPGaMSIEerfv79at24tSXbH7fTp0+rUqZO6d++uf/zjH/L3979uXe+8844sFouGDRum1NRUTZkyReHh4UpKSrKN6CqIgtR2JcMw9NBDD2nDhg3q06ePmjRpori4OA0dOlS///67Jk+ebNf+u+++0xdffKGXXnpJXl5emjZtmrp166Zjx46pQoUKBa4zV3Z2tiIiItSiRQt98MEHWrdunSZOnKgaNWoUyaiRefPm6eLFi+rfv79cXV3l6+urjIwMzZ07V0899ZT69euns2fP6pNPPlFERIR++OGHAl2O+cQTTygkJETjxo3Tjh07NHfuXPn5+em999674WsHDBig8uXLa+TIkTpy5IimTJmi6OhoLV682NYmJiZGEyZMUJcuXRQREaGff/5ZERERunjxYoH6PXXqVD300EPq0aOHsrKytGjRIj3++ONauXKlIiMj7doW5Jzu2rVLHTp0UKVKlTRq1ChdvnxZI0eOvOH7uiD++usv3Xffffr999/1/PPPq2rVqtqyZYtiYmJ08uRJ2zw18fHxeuqpp9S+fXvbcd63b582b96sV155RW3atNHLL7+sadOm6Y033lDdunUlyfbfaxk/frzKlCmjIUOGKD09XRMmTFCPHj3s5nqaPXu2oqOj1bp1aw0aNEhHjhxR165dVb58eVWuXPmW+u/p6alHHnlEn3zyifbu3av69etLKtg5nD9/fp5LV2vUqCFJ2rZtm7Zs2aLu3burcuXKOnLkiGbPnq22bdtq7969KleuXL715F5yOWjQIFWuXNl2yWGlSpV04cIFtW3bVgcPHlR0dLRCQkK0dOlS9e7dW2lpaXn+aJHf5y8/q1evVnZ2tnr27HnN49SzZ09t2LBBa9asUd++fW3L169fryVLlig6OloVK1ZUtWrV9Pvvv9vCmpiYGHl4eGju3Ln5jl6MjY2Vp6enBg8eLE9PT61fv14jRoxQRkaG3n//fbu2f/75pzp27KhHH31UTzzxhJYtW6Zhw4apYcOG6tSp0zVrl/6+xPjzzz/X008/rZYtW2r9+vV5PotSwc7bjd7rBelTVlaWIiIilJmZqQEDBiggIEC///67Vq5cqbS0NHl7e0v6+9+m4cOH64knnlDfvn116tQpTZ8+XW3atNFPP/0kHx8fvfnmm0pPT9dvv/1m+zejKC6fBoDbwgAAFEvp6emGJOPhhx8u8GuCg4ONXr162Z5fvHjRyM7Otmtz+PBhw9XV1RgzZoxt2cMPP2zUr1//utv29vY2oqKiClxLrnnz5hmSjG3btl1323fddZft+ciRI40r/4maPHmyIck4derUNbexbds2Q5Ixb968POvuu+8+Q5IxZ86cfNfdd999tucbNmwwJBl33HGHkZGRYVu+ZMkSQ5IxdepU27Krj/e1tnm92nr16mUEBwfbnq9YscKQZIwdO9au3WOPPWZYLBbj4MGDtmWSDBcXF7tlP//8syHJmD59ep59Xenw4cN5aurVq5chye69YRiGcddddxmhoaHX3d7VPDw87I5N7v6sVquRmppq1/by5ctGZmam3bI///zT8Pf3N5577jm75ZKMkSNH2p7nvleubvfII48YFSpUsFt29fnKfW+Gh4cbOTk5tuWDBg0ynJycjLS0NMMwDCM5OdlwdnY2unbtare9UaNGGZLyfQ9c7a+//rJ7npWVZTRo0MC4//778/SvIOe0a9euhpubm3H06FHbsr179xpOTk7Gzf7vXf369e3er2+//bbh4eFh/Pe//7Vr9/rrrxtOTk7GsWPHDMMwjFdeecWwWq3G5cuXr7ntpUuXGpKMDRs25Fl3rc9e3bp17d4PU6dONSQZu3btMgzDMDIzM40KFSoYzZs3Ny5dumRrFxsba0iy2+a1BAcHG5GRkddcn/ud8+WXX9qWFfQcXv3ev9brDcMwEhMTDUnGZ599Vqiap0yZYkgyPv/8c7u6wsLCDE9PT9t32PU+f/kZOHCgIcn46aefrtlmx44dhiRj8ODBtmWSjDJlyhh79uyxaztgwADDYrHYbe/06dOGr6+vIck4fPiwbXl+x+n55583ypUrZ1y8eNG2LPd7/cpjl5mZaQQEBBjdunW7bv+SkpIMScZLL71kt/zpp5/O8x1T0PN2vfd6Qfr0008/GZKMpUuXXrPuI0eOGE5OTsY777xjt3zXrl2Gs7Oz3fLIyEi7f1sAoLji8j0AKKYyMjIkSV5eXoXehqurq21i5+zsbJ0+fdp26duVl935+Pjot99+07Zt2665LR8fH23dulUnTpwodD3X4unped278Pn4+Ej6+xKIwk4K7urqqmeffbbA7Xv27Gl37B977DEFBgbq66+/LtT+C+rrr7+Wk5OTXn75Zbvlr776qgzD0OrVq+2Wh4eH20ZiSFKjRo1ktVr166+/FrqGF154we5569atb2l7V+rWrZsqVapkt8zJyck2r01OTo7OnDmjy5cvq1mzZgW+PDS/mk+fPm37HF1P//797S4Xbd26tbKzs3X06FFJUkJCgi5fvqyXXnrJ7nUDBgwoUG2S7EbX/fnnn0pPT1fr1q3z7d+Nzml2drbi4uLUtWtXVa1a1daubt26ioiIKHBN17J06VK1bt1a5cuX1x9//GF7hIeHKzs7W998842kvz+X58+fV3x8/C3v80rPPvus3TxHuaMLc/v/448/6vTp0+rXr5/d3HM9evRQ+fLli6SG3FElV34v3cw5zM+Vr7906ZJOnz6tmjVrysfHp9CXQX/99dcKCAjQU089ZVtWtmxZvfzyyzp37pw2bdpk1z6/z19+cvt9vX9/ctdd/Rm777778sx9tWbNGoWFhdmNevT19VWPHj3ybPfK43T27Fn98ccfat26tf766y/t37/frq2np6fdvGAuLi66++67b/h9lfs9fvX3bH6TghfFeStIn3JHQsXFxeW59DjXF198oZycHD3xxBN2n82AgADVqlUr30ueAaC4I5QCgGLKarVK0nXDmhvJycmxTdjr6uqqihUrqlKlStq5c6fdHBXDhg2Tp6en7r77btWqVUtRUVG2S+NyTZgwQbt371aVKlV09913a9SoUUUWVJw7d+66v/w8+eSTatWqlfr27St/f391795dS5YsuamA6o477ripiZVr1apl99xisahmzZq3/XbfR48eVVBQUJ7jkXsZSG5QkuvKUCJX+fLl9eeffxZq/25ubnl+ab2V7V0tJCQk3+WffvqpGjVqJDc3N1WoUEGVKlXSqlWr8sylci1XH4fccKIgdd/otbnHvGbNmnbtfH19CxyCrFy5Uvfcc4/c3Nzk6+urSpUqafbs2fn270bn9NSpU7pw4UKe96gk1a5du0D1XM8vv/yiNWvWqFKlSnaP8PBwSX/PYSRJL730ku6880516tRJlStX1nPPPVeg+cxupLDnw9nZucjmzTl37pwk+1DmZs5hfi5cuKARI0bY5unK/T5OS0sr8DaudvToUdWqVSvPXSWv9X1xrc/f1XL7fb1/f64VXOW3j6NHj+Y5X1Lecyj9fbn2I488Im9vb1mtVlWqVMkWPF19nCpXrpxn/sGCfF8dPXpUZcqUsQt/pfw/P0Vx3grSp5CQEA0ePFhz585VxYoVFRERoZkzZ9rt45dffpFhGKpVq1aez+e+fftsn00A+F/CnFIAUExZrVYFBQVp9+7dhd7Gu+++q+HDh+u5557T22+/LV9fX5UpU0YDBw60C3Tq1q2rAwcOaOXKlVqzZo3+/e9/a9asWRoxYoRGjx4t6e85e1q3bq3ly5dr7dq1ev/99/Xee+/piy++uOHcHdfz22+/KT09Pd9fTnK5u7vrm2++0YYNG7Rq1SqtWbNGixcv1v3336+1a9fKycnphvu5mXmgCurqX4ZyZWdnF6imonCt/RhXTYp+q9srKvmdh88//1y9e/dW165dNXToUPn5+cnJyUnjxo3ToUOHCrTdWzkORX0Mr/btt9/qoYceUps2bTRr1iwFBgaqbNmymjdvnt3NBMyq50ZycnL0wAMP6LXXXst3/Z133ilJ8vPzU1JSkuLi4rR69WqtXr1a8+bNU8+ePfNMtH0zHN1/Sbbv3dzvpZs9h/kZMGCA5s2bp4EDByosLEze3t6yWCzq3r17oUeA3qyCfg/mhlo7d+685pxuO3fulKQ8o6Ju5bs2LS1N9913n6xWq8aMGaMaNWrIzc1NO3bs0LBhw/IcJzPeK7d63m6mTxMnTlTv3r315Zdfau3atXr55Zc1btw4ff/996pcubJycnJksVi0evXqfPvOvFEA/hcRSgFAMda5c2d99NFHSkxMVFhY2E2/ftmyZWrXrp0++eQTu+VpaWmqWLGi3TIPDw89+eSTevLJJ5WVlaVHH31U77zzjmJiYmy38w4MDNRLL72kl156SampqWratKneeeedWwql5s+fL0k3vOyoTJkyat++vdq3b69Jkybp3Xff1ZtvvqkNGzYoPDz8mgFRYf3yyy92zw3D0MGDB9WoUSPbsvLlyystLS3Pa48eParq1avbnt9MbcHBwVq3bp3Onj1rNwIh9xKP4ODgAm/rf8WyZctUvXp1ffHFF3bHauTIkQ6s6v/kHvODBw/ajQI5ffp0gUZi/fvf/5abm5vi4uLsJnaeN29eoeqpVKmS3N3d87xHJenAgQOF2uaVatSooXPnztlGRl2Pi4uLunTpoi5duignJ0cvvfSSPvzwQw0fPlw1a9Ys8s+lZH8+2rVrZ1t++fJlHTlyxO4zWhjnzp3T8uXLVaVKFVs4czPn8Fp9XrZsmXr16qWJEyfall28eDHf75CCCg4O1s6dO5WTk2M3WupWvy86deokJycnzZ8//5qTnX/22WdydnZWx44dC1RnfndQvHrZxo0bdfr0aX3xxRdq06aNbfnhw4dvsgc3ricnJ0eHDh2yGx2V3+enoOftWuf9ZvvUsGFDNWzYUG+99Za2bNmiVq1aac6cORo7dqxq1KghwzAUEhJiC4ev5XZ89gDgduDyPQAoxl577TV5eHiob9++SklJybP+0KFDttuv58fJySnPX4yXLl2q33//3W7Z6dOn7Z67uLioXr16MgxDly5dUnZ2dp7LFPz8/BQUFKTMzMyb7ZbN+vXr9fbbbyskJCTfuUVynTlzJs+y3L/e5+7fw8NDkm7pF7wrffbZZ3aXrixbtkwnT560C+Bq1Kih77//XllZWbZlK1eutLs1983W9uCDDyo7O1szZsywWz558mRZLJZbCgCLq9y/+F/5Xt26dasSExMdVZKd9u3by9nZWbNnz7ZbfvU5uhYnJydZLBa7278fOXJEK1asKFQ9Tk5OioiI0IoVK3Ts2DHb8n379ikuLq5Q27zSE088ocTExHy3lZaWpsuXL0vK+71RpkwZWyB0uz6XktSsWTNVqFBBH3/8sa0WSVqwYMEtX2Z64cIFPfPMMzpz5ozefPNN2y/2N3MOPTw88u1vft/H06dPt9vmzXrwwQeVnJxsd6fIy5cva/r06fL09NR9991XqO1WqVJFzz77rNatW5fnfS9Jc+bM0fr169WnT58C3e0wIiJCiYmJSkpKsi07c+aMFixYYNcuv++CrKwszZo1q1D9uJbc79Fp06bZLc+9s+TVNRXkvF3rvV7QPmVkZNi9n6W/A6oyZcrYPk+PPvqonJycNHr06Dw1GYZh95n08PAo9GWhAGAmRkoBQDFWo0YNLVy4UE8++aTq1q2rnj17qkGDBsrKytKWLVtst/6+ls6dO2vMmDF69tln1bJlS+3atUsLFiywG8UjSR06dFBAQIBatWolf39/7du3TzNmzFBkZKS8vLyUlpamypUr67HHHlPjxo3l6empdevWadu2bXZ/Pb6e1atXa//+/bp8+bJSUlK0fv16xcfHKzg4WF999ZVtNFZ+xowZo2+++UaRkZEKDg5WamqqZs2apcqVK+vee++1HSsfHx/NmTNHXl5e8vDwUIsWLQo8h8rVfH19de+99+rZZ59VSkqKpkyZopo1a6pfv362Nn379tWyZcvUsWNHPfHEEzp06JA+//zzPPOU3ExtXbp0Ubt27fTmm2/qyJEjaty4sdauXasvv/xSAwcOzLPtkqBz58764osv9MgjjygyMlKHDx/WnDlzVK9ePdvcPo7k7++vV155RRMnTtRDDz2kjh076ueff9bq1atVsWLFG45IiIyM1KRJk9SxY0c9/fTTSk1N1cyZM1WzZk3bJVA3a/To0VqzZo1at26tl156yRZE1K9fv9DbzDV06FB99dVX6ty5s3r37q3Q0FCdP39eu3bt0rJly3TkyBFVrFhRffv21ZkzZ3T//fercuXKOnr0qKZPn64mTZrYRhg1adJETk5Oeu+995Seni5XV1fd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\n",
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_histogram(y_train, y_test, title_suffix='for Organ dataset')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "LYCXlHFFaHTW",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 807
        },
        "id": "LYCXlHFFaHTW",
        "outputId": "d9a96372-eb86-4108-af9d-9de46ada96fb"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_histogram_fancy(X_train, y_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "68c97ca0-15b8-4101-b6b5-b76431c3ca17",
      "metadata": {
        "id": "68c97ca0-15b8-4101-b6b5-b76431c3ca17"
      },
      "source": [
        "### Examples of preprocessed data\n",
        "Please print/display some examples of your preprocessed data here."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "jFk7HNFt2OaD",
      "metadata": {
        "id": "jFk7HNFt2OaD"
      },
      "source": [
        "### Preprocess of Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0ceS21G403Nk",
      "metadata": {
        "id": "0ceS21G403Nk"
      },
      "outputs": [],
      "source": [
        "def random_forest_preprocess(X_train, Y_train, X_test, Y_test):\n",
        "\n",
        "\n",
        "#don't actually need to scale\n",
        "    # X_train = X_train.astype('float32') / 255.0\n",
        "    # X_test = X_test.astype('float32') / 255.0\n",
        "\n",
        "    X_train = X_train.reshape(X_train.shape[0], -1)\n",
        "    X_test = X_test.reshape(X_test.shape[0], -1)\n",
        "\n",
        "    return X_train, Y_train, X_test, Y_test"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b5qR3iyP3ZzB",
      "metadata": {
        "id": "b5qR3iyP3ZzB"
      },
      "source": [
        "### Preprocess of fully connected neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "Y-20f_IK4IXl",
      "metadata": {
        "id": "Y-20f_IK4IXl"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "\n",
        "def fully_conn_preprocess(X_train, Y_train, X_test, Y_test):\n",
        "    X_train = X_train.reshape(X_train.shape[0], -1)\n",
        "    X_test = X_test.reshape(X_test.shape[0], -1)\n",
        "\n",
        "    # Scaling over here\n",
        "    scaler = MinMaxScaler()\n",
        "    X_train = scaler.fit_transform(X_train)\n",
        "    X_test = scaler.transform(X_test)\n",
        "\n",
        "    # one-hot for all our 11 unique classes\n",
        "    Y_train = tf.keras.utils.to_categorical(Y_train, 11)\n",
        "    Y_test = tf.keras.utils.to_categorical(Y_test,11)\n",
        "\n",
        "    return X_train, Y_train, X_test, Y_test"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7-d1Uq4v7ffb",
      "metadata": {
        "id": "7-d1Uq4v7ffb"
      },
      "source": [
        "### Preprocess of Conv neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "Dk60kmp17n9j",
      "metadata": {
        "id": "Dk60kmp17n9j"
      },
      "outputs": [],
      "source": [
        "def convolutional_preprocess(X_train, y_train, X_test, y_test, ):\n",
        "\n",
        "    X_train = X_train.astype('float32') / 255.0\n",
        "    X_test = X_test.astype('float32') / 255.0\n",
        "\n",
        "    # One-hot\n",
        "    y_train = tf.keras.utils.to_categorical(y_train, 11)\n",
        "    y_test = tf.keras.utils.to_categorical(y_test, 11)\n",
        "\n",
        "    # Split tr\n",
        "    X_train, X_valid, y_train, y_valid = train_test_split(\n",
        "        X_train, y_train, train_size=0.7)\n",
        "\n",
        "\n",
        "    X_train = np.expand_dims(X_train, -1)\n",
        "    X_valid = np.expand_dims(X_valid, -1)\n",
        "    X_test = np.expand_dims(X_test, -1)\n",
        "\n",
        "    return X_train, y_train, X_valid, y_valid, X_test, y_test\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "c81bb2b0",
      "metadata": {
        "id": "c81bb2b0"
      },
      "source": [
        "## 2. Algorithm design and setup"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0c873320",
      "metadata": {
        "id": "0c873320"
      },
      "source": [
        "### Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "gfMVEayl1wno",
      "metadata": {
        "id": "gfMVEayl1wno"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "def create_random_forest_classifier(n_estimators=100, max_depth=50, random_state=0, criterion='entropy'):\n",
        "    model = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth, random_state=random_state, criterion=criterion)\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "SgBbLJzl2Bpw",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "SgBbLJzl2Bpw",
        "outputId": "52be446f-6892-4bb9-eb10-8cb2788b7a0b"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Classification metrics can't handle a mix of multilabel-indicator and binary targets",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-46-3dcc232cb753>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_rf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test_rf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test Accuracy: {accuracy:.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    211\u001b[0m                     )\n\u001b[1;32m    212\u001b[0m                 ):\n\u001b[0;32m--> 213\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    214\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInvalidParameterError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                 \u001b[0;31m# When the function is just a wrapper around an estimator, we allow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36maccuracy_score\u001b[0;34m(y_true, y_pred, normalize, sample_weight)\u001b[0m\n\u001b[1;32m    211\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m     \u001b[0;31m# Compute accuracy for each possible representation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 213\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    214\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"multilabel\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 94\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m     95\u001b[0m             \"Classification metrics can't handle a mix of {0} and {1} targets\".format(\n\u001b[1;32m     96\u001b[0m                 \u001b[0mtype_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype_pred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Classification metrics can't handle a mix of multilabel-indicator and binary targets"
          ]
        }
      ],
      "source": [
        "\n",
        "X_train_rf, y_train_rf,X_test_rf,y_test_rf = random_forest_preprocess(X_train,y_train,X_test,y_test)\n",
        "\n",
        "model= create_random_forest_classifier()\n",
        "RF_history = model.fit(X_train_rf, y_train_rf)\n",
        "\n",
        "\n",
        "y_pred = model.predict(X_test_rf) #name got changed but previous upload should show correct result\n",
        "accuracy = accuracy_score(y_test_rf, y_pred)\n",
        "\n",
        "print(f\"Test Accuracy: {accuracy:.4f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b895ee03",
      "metadata": {
        "id": "b895ee03"
      },
      "source": [
        "### Fully connected neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ND8T-kS_4bxa",
      "metadata": {
        "id": "ND8T-kS_4bxa"
      },
      "outputs": [],
      "source": [
        "#this works better than the other tuning version we will use later\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "\n",
        "def fully_conn_network(optimizer='SGD', learning_rate=0.05):\n",
        "    model = keras.models.Sequential([\n",
        "    keras.layers.Input(shape=(784,)),\n",
        "    keras.layers.Flatten(),\n",
        "    keras.layers.Dense(300, activation=\"tanh\"),\n",
        "    keras.layers.Dense(100, activation=\"tanh\"),\n",
        "    keras.layers.Dense(11, activation=\"softmax\")\n",
        "  ])\n",
        "\n",
        "\n",
        "\n",
        "   # Select optimizer based on input argument\n",
        "    if optimizer == 'SGD':\n",
        "        opt = tf.keras.optimizers.SGD(learning_rate=learning_rate)\n",
        "    elif optimizer == 'Adam':\n",
        "        opt = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n",
        "    elif optimizer == 'RMSprop':\n",
        "        opt = tf.keras.optimizers.RMSprop(learning_rate=learning_rate)\n",
        "    else:\n",
        "        raise ValueError(\"Unsupported optimizer\")\n",
        "\n",
        "    model.compile(loss='categorical_crossentropy',  # Adjust loss type if needed based on your label format\n",
        "                  optimizer=opt,\n",
        "                  metrics=['accuracy'])\n",
        "\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "HvUTh33-7M6O",
      "metadata": {
        "id": "HvUTh33-7M6O"
      },
      "outputs": [],
      "source": [
        "#adapted from the notebook but at the moment does not give a decent accuracy\n",
        "def tunable_fully_network(n_hidden_layers=2, n_hidden_neurons=50,\n",
        "    activation_function=\"relu\",input_shape=(784,), learning_rate=0.01):\n",
        "\n",
        "\n",
        "    model = keras.models.Sequential()\n",
        "\n",
        "\n",
        "\n",
        "    model.add(keras.layers.Input(shape=input_shape)),\n",
        "    model.add(keras.layers.Flatten())\n",
        "\n",
        "    # Add the hidden layers with desired size and activation function\n",
        "    for layer in range(n_hidden_layers):\n",
        "        model.add(keras.layers.Dense(n_hidden_neurons, activation=activation_function))\n",
        "\n",
        "\n",
        "    model.add(keras.layers.Dense(11, activation=\"softmax\"))\n",
        "\n",
        "    optimizer = keras.optimizers.Adam(learning_rate=learning_rate)\n",
        "    model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "tFdp53AY4vU9",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "tFdp53AY4vU9",
        "outputId": "f4665475-527d-4cf5-d8d7-d12ad35daee4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 8ms/step - accuracy: 0.5743 - loss: 1.2987 - val_accuracy: 0.6490 - val_loss: 1.0495\n",
            "Epoch 2/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 5ms/step - accuracy: 0.7500 - loss: 0.7918 - val_accuracy: 0.7039 - val_loss: 0.8917\n",
            "Epoch 3/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.7835 - loss: 0.6779 - val_accuracy: 0.7377 - val_loss: 0.7730\n",
            "Epoch 4/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 10ms/step - accuracy: 0.8051 - loss: 0.6082 - val_accuracy: 0.7567 - val_loss: 0.7233\n",
            "Epoch 5/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.8176 - loss: 0.5614 - val_accuracy: 0.7731 - val_loss: 0.6909\n",
            "Epoch 6/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.8329 - loss: 0.5127 - val_accuracy: 0.7808 - val_loss: 0.6781\n",
            "Epoch 7/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.8438 - loss: 0.4809 - val_accuracy: 0.8024 - val_loss: 0.6164\n",
            "Epoch 8/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.8497 - loss: 0.4564 - val_accuracy: 0.8162 - val_loss: 0.5911\n",
            "Epoch 9/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 8ms/step - accuracy: 0.8598 - loss: 0.4322 - val_accuracy: 0.8122 - val_loss: 0.5830\n",
            "Epoch 10/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 6ms/step - accuracy: 0.8690 - loss: 0.4038 - val_accuracy: 0.8080 - val_loss: 0.5912\n",
            "Epoch 11/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 8ms/step - accuracy: 0.8737 - loss: 0.3859 - val_accuracy: 0.8199 - val_loss: 0.5711\n",
            "Epoch 12/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 5ms/step - accuracy: 0.8785 - loss: 0.3717 - val_accuracy: 0.8156 - val_loss: 0.5921\n",
            "Epoch 13/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 6ms/step - accuracy: 0.8798 - loss: 0.3578 - val_accuracy: 0.8241 - val_loss: 0.5803\n",
            "Epoch 14/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step - accuracy: 0.8891 - loss: 0.3415 - val_accuracy: 0.8257 - val_loss: 0.5537\n",
            "Epoch 15/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 6ms/step - accuracy: 0.8988 - loss: 0.3132 - val_accuracy: 0.8349 - val_loss: 0.5386\n",
            "Epoch 16/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.9065 - loss: 0.2950 - val_accuracy: 0.8156 - val_loss: 0.5829\n",
            "Epoch 17/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 5ms/step - accuracy: 0.9097 - loss: 0.2815 - val_accuracy: 0.8370 - val_loss: 0.5345\n",
            "Epoch 18/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.9127 - loss: 0.2694 - val_accuracy: 0.8191 - val_loss: 0.5830\n",
            "Epoch 19/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 7ms/step - accuracy: 0.9105 - loss: 0.2722 - val_accuracy: 0.8162 - val_loss: 0.5937\n",
            "Epoch 20/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 6ms/step - accuracy: 0.9140 - loss: 0.2610 - val_accuracy: 0.8098 - val_loss: 0.6344\n",
            "\u001b[1m148/148\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.8049 - loss: 0.6358\n",
            "Test Loss: 0.6485\n",
            "Test Accuracy: 0.8033\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "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hbh06dItt9fNaOlmERERyd3MifB2iHOuPewkeBS6abWHH36Y559/nt9++4177rkHgPPnz7Ns2TKWLl3K5cuX6dChA2+99Raenp58/fXXdOzYkb1791K6dOksh+Xi4sKECRMICgri9OnTDBw4kMGDBzNp0iTASGDvuecennjiCT766CPc3Nz47bffSEtLA2Do0KF88cUXfPjhhzRp0oRTp06xZ8+eLMWQmJjIu+++y5dffklAQADFixfn0KFD9O7dm08++QSr1coHH3xAhw4d2L9/P4ULF8ZisdC+fXsuXbrEzJkziYiIYNeuXbi6ulKoUCG6devGtGnTeOihh2zXubZfuHDhLLeTo5QQi4iIiNymokWL0r59e2bPnm1LiOfPn09gYCAtW7bExcWFmjVr2uq/8cYbLFq0iO+//56BAwdm+XovvfQSFouF+Ph4qlWrxptvvsmAAQNsCfF7771HvXr1bPsAVatWBeDSpUt89NFHfPrpp/Tu3RuAiIgImjRpkqUYzGYzkyZNsruvVq1a2dX5/PPP8ff3Z/Xq1dx///2sWLGCjRs3snv3bu666y4AypUrZ6v/5JNP0rhxY06dOkXJkiU5ffo0S5cuva3edEcoIRYREZHczd3H6Kl11rUd9Nhjj9G/f38mTZqEp6cns2bNolu3bri4uHD58mVGjx7NkiVLOHXqFKmpqVy5coXo6OhbCmvFihWMGzeO3bt3c+nSJVJTU0lKSiIxMREfHx+2bdvGww8/nOGxu3fvJjk52Za43yoPDw9q1KhhVxYbG8vw4cNZtWoVp0+fJi0tjcTERNt9btu2jVKlStmS4f9q0KABVatW5auvvmLIkCHMnDmT8PBwmjVrdlux3ozGEIuIiEjuZjIZwxacsZlMDofZsWNHrFYrS5Ys4dixY/zxxx889thjALzyyissWrSIt99+mz/++INt27ZRvXp1UlJSstwcR44c4f7776d69ep89dVXbNq0iYkTJwLYzuft7Z3p8Td6DYzhGADW68ZPm83mDM9j+k/79O7dm23btvHRRx+xdu1atm3bRkBAgENxXfPkk08yffp0wBgu0bdv33TXyW5KiEVERESygZeXF126dGHWrFnMmTOHihUrUqdOHcB4wK1Pnz507tyZ6tWrExwcbHtALas2b96MxWLh/fffp379+tx1112cPGnfg16jRg1WrlyZ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T5WVlWavWceOHTOM8XierJ2/PZGlPDU2Norp06eL/v37Czc3NxEcHCzefPPNdo2t3OupzbZt24Snp6eor683OYYc6qmrSEII0aW3oImIiIiIujE+Q0xEREREssaGmIiIiIhkjQ0xEREREckaG2IiIiIikjU2xEREREQka2yIiYiIiEjW2BATERERkayxISYiIiIiWWNDTERE/4okSdi/f7+jp0FE1GlsiImIerDU1FRIktTuFRMT4+ipERH1GL0cPQEiIvp3YmJikJeXZ7RNoVA4aDZERD0P7xATEfVwCoUCKpXK6NWnTx8Ajx5nyMnJQWxsLDw9PTF06FB8//33RseXl5dj6tSp8PT0RL9+/ZCWloYHDx4YxeTm5mL06NFQKBQIDAzE0qVLjfbX1dXh5ZdfhpeXF4YPH46DBw927aKJiJ4gNsRERE5Oo9EgMTER586dQ1JSEubOnYtLly4BABoaGhAdHY0+ffrg9OnT2Lt3LwoKCowa3pycHKSnpyMtLQ3l5eU4ePAgnn76aaPPWLduHWbPno3z589jxowZSEpKwt27d+26TiKizpKEEMLRkyAios5JTU3Fzp074eHhYbR91apVWLVqFSRJwuLFi5GTk2PY9/zzz2PcuHHYunUrvvrqK2RmZuLGjRvw9vYGABw+fBhxcXG4desWlEolBgwYgAULFuCDDz4wOQdJkrB69WqsX78ewKMm+6mnnsJPP/3EZ5mJqEfgM8RERD3cSy+9ZNTwAkDfvn0NP6vVaqN9arUaZ8+eBQBcunQJ4eHhhmYYACZPngy9Xo+KigpIkoRbt25h2rRpFucwZswYw8/e3t7w8fFBbW1tZ5dERGRXbIiJiHo4b2/vdo8wPCmenp42xbm5uRm9lyQJer2+K6ZERPTE8RliIiInd/LkyXbvR40aBQAYNWoUzp07h4aGBsP+4uJiuLi4IDQ0FL1798aQIUNQWFho1zkTEdkT7xATEfVwDx8+hFarNdrWq1cv+Pv7AwD27t2L8ePHY8qUKfj2229RUlKC7du3AwCSkpKQlZWFlJQUrF27Frdv38ayZcuQnJwMpVIJAFi7di0WL16MgIAAxMbGQqfTobi4GMuWLbPvQomIuggbYiKiHu7IkSMIDAw02hYaGorLly8DePQNELt378bbb7+NwMBA7Nq1C8888wwAwMvLC0ePHsXy5csxYcIEeHl5ITExERs3bjSMlZKSgqamJmzatAkrV66Ev78/Xn31VfstkIioi/FbJoiInJgkSdi3bx8SEhIcPRUiom6LzxATERERkayxISYiIiIiWeMzxEREToxPxRERWcc7xEREREQka2yIiYiIiEjW2BATERERkayxISYiIiIiWWNDTERERESyxoaYiIiIiGSNDTERERERyRobYiIiIiKStf8HJVt+lUbPTUwAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "X_train_mlp, y_train_mlp, X_valid_mlp, y_valid_mlp = fully_conn_preprocess(X_train,y_train,X_test,y_test)\n",
        "\n",
        "model = fully_conn_network(optimizer='Adam', learning_rate=0.001) #gives highest accuracy at the moment\n",
        "\n",
        "MLP_history = model.fit(X_train_mlp, y_train_mlp, epochs=20, batch_size=24, validation_split=0.2)\n",
        "# model = build_mlp(n_hidden_layers=2, n_hidden_neurons=50,activation_function=\"relu\", input_shape=(784,), learning_rate=0.01)\n",
        "# MLP_history = model.fit(X_train_mlp, y_train_mlp, epochs=20, batch_size=32, validation_split=0.2)\n",
        "loss, accuracy = model.evaluate(X_valid_mlp, y_valid_mlp)\n",
        "print(f\"Test Loss: {loss:.4f}\")\n",
        "print(f\"Test Accuracy: {accuracy:.4f}\")\n",
        "plot_training_acc(MLP_history)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "63aa570f",
      "metadata": {
        "id": "63aa570f"
      },
      "source": [
        "### Convolutional neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "MKZ1VRgD8TIO",
      "metadata": {
        "id": "MKZ1VRgD8TIO"
      },
      "outputs": [],
      "source": [
        "#normal CNN or something fancier to use?\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization, Activation\n",
        "from tensorflow.keras.optimizers import Adam, SGD, RMSprop\n",
        "def convolutional_network(input_shape, num_classes=11, optimizer='Adam', learning_rate=0.001, loss='categorical_crossentropy'):\n",
        "\n",
        "\n",
        "    model = Sequential()\n",
        "\n",
        "    num_filters = [32, 64, 128]\n",
        "    kernel_size = (3,3)\n",
        "    pool_size = (2,2)\n",
        "    dropout_rate = 0.25\n",
        "\n",
        "    for i, filters in enumerate(num_filters):\n",
        "\n",
        "        if i == 0:\n",
        "            model.add(Conv2D(filters, kernel_size, padding='same', input_shape=input_shape))\n",
        "        else:\n",
        "            model.add(Conv2D(filters, kernel_size, padding='same'))\n",
        "\n",
        "        model.add(BatchNormalization())\n",
        "        model.add(Activation('relu'))\n",
        "        model.add(MaxPooling2D(pool_size))\n",
        "        model.add(Dropout(dropout_rate))\n",
        "\n",
        "    # Final convolution layer before flattening\n",
        "    model.add(Conv2D(256, (3,3), padding='same'))\n",
        "    model.add(BatchNormalization())\n",
        "    model.add(Activation('relu'))\n",
        "    model.add(MaxPooling2D(pool_size=(2,2)))\n",
        "    model.add(Dropout(dropout_rate))\n",
        "\n",
        "    model.add(Flatten())\n",
        "    model.add(Dense(num_classes, activation='softmax'))  # Output layer for classification\n",
        "\n",
        "    # Compile the model with the specified optimizer, learning rate, and loss function\n",
        "    if optimizer.lower() == 'adam':\n",
        "        opt = Adam(learning_rate=learning_rate)\n",
        "    elif optimizer.lower() == 'sgd':\n",
        "        opt = SGD(learning_rate=learning_rate)\n",
        "    elif optimizer.lower() == 'rmsprop':\n",
        "        opt = RMSprop(learning_rate=learning_rate)\n",
        "    else:\n",
        "         raise ValueError(\"Unsupported optimizer. Supported: 'adam', 'sgd', 'rmsprop'.\")\n",
        "\n",
        "    model.compile(optimizer=opt, loss=loss, metrics=['accuracy'])\n",
        "\n",
        "    return model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "J9QgNVo19ftV",
      "metadata": {
        "id": "J9QgNVo19ftV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d316384d-c9d9-4670-c5c6-0d997a8642fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 116ms/step - accuracy: 0.6174 - loss: 1.2180 - val_accuracy: 0.1521 - val_loss: 3.8652\n",
            "Epoch 2/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 118ms/step - accuracy: 0.8504 - loss: 0.4404 - val_accuracy: 0.8381 - val_loss: 0.4591\n",
            "Epoch 3/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 105ms/step - accuracy: 0.8852 - loss: 0.3280 - val_accuracy: 0.9034 - val_loss: 0.2845\n",
            "Epoch 4/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 108ms/step - accuracy: 0.9030 - loss: 0.2681 - val_accuracy: 0.9132 - val_loss: 0.2652\n",
            "Epoch 5/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 105ms/step - accuracy: 0.9226 - loss: 0.2302 - val_accuracy: 0.9351 - val_loss: 0.2016\n",
            "Epoch 6/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 104ms/step - accuracy: 0.9261 - loss: 0.2093 - val_accuracy: 0.9200 - val_loss: 0.2415\n",
            "Epoch 7/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 103ms/step - accuracy: 0.9375 - loss: 0.1798 - val_accuracy: 0.9370 - val_loss: 0.1921\n",
            "Epoch 8/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 104ms/step - accuracy: 0.9382 - loss: 0.1752 - val_accuracy: 0.9200 - val_loss: 0.2493\n",
            "Epoch 9/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 103ms/step - accuracy: 0.9451 - loss: 0.1583 - val_accuracy: 0.9389 - val_loss: 0.1881\n",
            "Epoch 10/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 101ms/step - accuracy: 0.9479 - loss: 0.1478 - val_accuracy: 0.8792 - val_loss: 0.3493\n",
            "Epoch 11/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 100ms/step - accuracy: 0.9525 - loss: 0.1374 - val_accuracy: 0.9351 - val_loss: 0.1886\n",
            "Epoch 12/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 104ms/step - accuracy: 0.9597 - loss: 0.1233 - val_accuracy: 0.9230 - val_loss: 0.2421\n",
            "Epoch 13/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 105ms/step - accuracy: 0.9587 - loss: 0.1158 - val_accuracy: 0.9377 - val_loss: 0.1955\n",
            "Epoch 14/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 104ms/step - accuracy: 0.9664 - loss: 0.1010 - val_accuracy: 0.9125 - val_loss: 0.2987\n",
            "Epoch 15/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 100ms/step - accuracy: 0.9632 - loss: 0.1056 - val_accuracy: 0.9426 - val_loss: 0.1623\n",
            "Epoch 16/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 100ms/step - accuracy: 0.9638 - loss: 0.1031 - val_accuracy: 0.9589 - val_loss: 0.1213\n",
            "Epoch 17/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 100ms/step - accuracy: 0.9692 - loss: 0.0988 - val_accuracy: 0.9562 - val_loss: 0.1282\n",
            "Epoch 18/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 105ms/step - accuracy: 0.9712 - loss: 0.0861 - val_accuracy: 0.9509 - val_loss: 0.1404\n",
            "Epoch 19/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 99ms/step - accuracy: 0.9733 - loss: 0.0794 - val_accuracy: 0.8845 - val_loss: 0.3875\n",
            "Epoch 20/20\n",
            "\u001b[1m332/332\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 102ms/step - accuracy: 0.9685 - loss: 0.0859 - val_accuracy: 0.8989 - val_loss: 0.3366\n",
            "\u001b[1m178/178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - accuracy: 0.9038 - loss: 0.3212\n",
            "Validation Loss: 0.3461\n",
            "Validation Accuracy: 0.9000\n"
          ]
        }
      ],
      "source": [
        "model = convolutional_network(input_shape=[28,28,1], num_classes=11, optimizer='Adam', learning_rate=0.001, loss='categorical_crossentropy')\n",
        "X_train_CNN, y_train_CNN,X_valid_CNN,y_valid_CNN, X_test_CNN,y_test_CNN= convolutional_preprocess(X_train,y_train,X_test,y_test)\n",
        "\n",
        "cnn_history = model.fit(X_train_CNN, y_train_CNN, epochs=20, batch_size=32, validation_split=0.2)\n",
        "loss, accuracy = model.evaluate(X_valid_CNN, y_valid_CNN)\n",
        "print(f\"Validation Loss: {loss:.4f}\")\n",
        "print(f\"Validation Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "# plot_accuracy(cnn_history)\n",
        "# plot_loss(cnn_history)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "loss, accuracy = model.evaluate(X_test_CNN, y_test_CNN)\n",
        "print(f\"TestLoss: {loss:.4f}\")\n",
        "print(f\"Test Accuracy: {accuracy:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s69et6zrWYiz",
        "outputId": "5928fd56-153b-4b6d-9f1b-1f1b79debbff"
      },
      "id": "s69et6zrWYiz",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m148/148\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 31ms/step - accuracy: 0.8992 - loss: 0.3506\n",
            "TestLoss: 0.3464\n",
            "Test Accuracy: 0.8984\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3b4911b1",
      "metadata": {
        "id": "3b4911b1"
      },
      "source": [
        "## 3. Hyperparameter tuning"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "71085600",
      "metadata": {
        "id": "71085600"
      },
      "source": [
        "### Algorithm of choice from first six weeks of course (Random Forest)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "DFl8ttjN_pal",
      "metadata": {
        "id": "DFl8ttjN_pal"
      },
      "outputs": [],
      "source": [
        "def tuning_random_forest_classifier(X_train, y_train):\n",
        "    from sklearn.model_selection import GridSearchCV\n",
        "    from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "    param_grid = {\n",
        "    \"n_estimators\": [50, 100, 200],\n",
        "    \"max_depth\": [10, 30, 50],\n",
        "    \"criterion\": ['gini', 'entropy']\n",
        "    }\n",
        "    model = create_random_forest_classifier(random_state=0)\n",
        "    grid_search_cv = GridSearchCV(model, param_grid, cv=3, verbose=2)\n",
        "    grid_search_cv.fit(X_train, y_train)\n",
        "    best_params = grid_search_cv.best_params_\n",
        "    best_model = grid_search_cv.best_estimator_\n",
        "\n",
        "    return best_model, best_params"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3r7U8ILH_tY5",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3r7U8ILH_tY5",
        "outputId": "c35d67d2-f4bb-4e1b-9384-e799c4d131f8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 3 folds for each of 18 candidates, totalling 54 fits\n",
            "[CV] END ......criterion=gini, max_depth=10, n_estimators=50; total time=   9.6s\n",
            "[CV] END ......criterion=gini, max_depth=10, n_estimators=50; total time=  14.8s\n",
            "[CV] END ......criterion=gini, max_depth=10, n_estimators=50; total time=   9.6s\n",
            "[CV] END .....criterion=gini, max_depth=10, n_estimators=100; total time=  18.1s\n",
            "[CV] END .....criterion=gini, max_depth=10, n_estimators=100; total time=  18.2s\n",
            "[CV] END .....criterion=gini, max_depth=10, n_estimators=100; total time=  19.2s\n",
            "[CV] END .....criterion=gini, max_depth=10, n_estimators=200; total time=  36.9s\n",
            "[CV] END .....criterion=gini, max_depth=10, n_estimators=200; total time=  38.5s\n",
            "[CV] END .....criterion=gini, max_depth=10, n_estimators=200; total time=  37.6s\n",
            "[CV] END ......criterion=gini, max_depth=30, n_estimators=50; total time=  14.3s\n",
            "[CV] END ......criterion=gini, max_depth=30, n_estimators=50; total time=  14.3s\n",
            "[CV] END ......criterion=gini, max_depth=30, n_estimators=50; total time=  14.2s\n",
            "[CV] END .....criterion=gini, max_depth=30, n_estimators=100; total time=  28.5s\n",
            "[CV] END .....criterion=gini, max_depth=30, n_estimators=100; total time=  44.4s\n",
            "[CV] END .....criterion=gini, max_depth=30, n_estimators=100; total time=  30.9s\n",
            "[CV] END .....criterion=gini, max_depth=30, n_estimators=200; total time=  57.8s\n",
            "[CV] END .....criterion=gini, max_depth=30, n_estimators=200; total time=  57.1s\n",
            "[CV] END .....criterion=gini, max_depth=30, n_estimators=200; total time=  56.8s\n",
            "[CV] END ......criterion=gini, max_depth=50, n_estimators=50; total time=  14.5s\n",
            "[CV] END ......criterion=gini, max_depth=50, n_estimators=50; total time=  14.3s\n",
            "[CV] END ......criterion=gini, max_depth=50, n_estimators=50; total time=  14.4s\n",
            "[CV] END .....criterion=gini, max_depth=50, n_estimators=100; total time=  28.7s\n",
            "[CV] END .....criterion=gini, max_depth=50, n_estimators=100; total time=  28.5s\n",
            "[CV] END .....criterion=gini, max_depth=50, n_estimators=100; total time=  28.5s\n",
            "[CV] END .....criterion=gini, max_depth=50, n_estimators=200; total time=  57.4s\n",
            "[CV] END .....criterion=gini, max_depth=50, n_estimators=200; total time=  57.8s\n",
            "[CV] END .....criterion=gini, max_depth=50, n_estimators=200; total time=  57.0s\n",
            "[CV] END ...criterion=entropy, max_depth=10, n_estimators=50; total time=  13.5s\n",
            "[CV] END ...criterion=entropy, max_depth=10, n_estimators=50; total time=  13.4s\n",
            "[CV] END ...criterion=entropy, max_depth=10, n_estimators=50; total time=  13.5s\n",
            "[CV] END ..criterion=entropy, max_depth=10, n_estimators=100; total time=  26.7s\n",
            "[CV] END ..criterion=entropy, max_depth=10, n_estimators=100; total time=  37.6s\n",
            "[CV] END ..criterion=entropy, max_depth=10, n_estimators=100; total time=  37.1s\n",
            "[CV] END ..criterion=entropy, max_depth=10, n_estimators=200; total time= 1.2min\n",
            "[CV] END ..criterion=entropy, max_depth=10, n_estimators=200; total time=  57.7s\n",
            "[CV] END ..criterion=entropy, max_depth=10, n_estimators=200; total time= 1.3min\n",
            "[CV] END ...criterion=entropy, max_depth=30, n_estimators=50; total time=  19.6s\n",
            "[CV] END ...criterion=entropy, max_depth=30, n_estimators=50; total time=  22.4s\n",
            "[CV] END ...criterion=entropy, max_depth=30, n_estimators=50; total time=  28.7s\n",
            "[CV] END ..criterion=entropy, max_depth=30, n_estimators=100; total time= 1.2min\n",
            "[CV] END ..criterion=entropy, max_depth=30, n_estimators=100; total time=  39.5s\n",
            "[CV] END ..criterion=entropy, max_depth=30, n_estimators=100; total time=  49.5s\n",
            "[CV] END ..criterion=entropy, max_depth=30, n_estimators=200; total time= 1.6min\n",
            "[CV] END ..criterion=entropy, max_depth=30, n_estimators=200; total time= 1.5min\n",
            "[CV] END ..criterion=entropy, max_depth=30, n_estimators=200; total time= 1.3min\n",
            "[CV] END ...criterion=entropy, max_depth=50, n_estimators=50; total time=  20.3s\n",
            "[CV] END ...criterion=entropy, max_depth=50, n_estimators=50; total time=  19.3s\n",
            "[CV] END ...criterion=entropy, max_depth=50, n_estimators=50; total time=  20.4s\n",
            "[CV] END ..criterion=entropy, max_depth=50, n_estimators=100; total time=  38.4s\n",
            "[CV] END ..criterion=entropy, max_depth=50, n_estimators=100; total time=  42.5s\n",
            "[CV] END ..criterion=entropy, max_depth=50, n_estimators=100; total time=  57.6s\n",
            "[CV] END ..criterion=entropy, max_depth=50, n_estimators=200; total time= 1.6min\n",
            "[CV] END ..criterion=entropy, max_depth=50, n_estimators=200; total time= 1.6min\n",
            "[CV] END ..criterion=entropy, max_depth=50, n_estimators=200; total time= 1.3min\n",
            "Best parameters for RF classifier: {'criterion': 'entropy', 'max_depth': 30, 'n_estimators': 200}\n"
          ]
        }
      ],
      "source": [
        "X_train_RF, y_train_RF,X_test_RF,y_test_RF = random_forest_preprocess(X_train,y_train,X_test,y_test)\n",
        "\n",
        "best_RF_model, best_RF_params = tuning_random_forest_classifier(X_train_RF, y_train_RF)\n",
        "\n",
        "print(\"Finding the best pararms for Random forest:\", best_RF_params)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "08d2d615",
      "metadata": {
        "id": "08d2d615"
      },
      "source": [
        "### Fully connected neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "H8Huoht94o_Q",
      "metadata": {
        "colab": {
          "background_save": true
        },
        "id": "H8Huoht94o_Q"
      },
      "outputs": [],
      "source": [
        "from scikeras.wrappers import KerasClassifier\n",
        "\n",
        "\n",
        "keras_classifier = KerasClassifier(tunable_fully_network,\n",
        "                                n_hidden_layers=2,\n",
        "                                n_hidden_neurons=50,\n",
        "                                activation_function=\"relu\",\n",
        "                                loss=\"categorical_crossentropy\",\n",
        "                                optimizer=\"sgd\",\n",
        "                                optimizer__learning_rate=0.01,\n",
        "                                metrics=[\"accuracy\"]\n",
        "                              )\n",
        "print(keras_classifier.get_params().keys())\n",
        "param_grid = {\n",
        "    \"n_hidden_neurons\": [100, 200],\n",
        "    \"optimizer__learning_rate\": [0.1, 0.01, 0.001],\n",
        "    \"activation_function\": [\"relu\", \"sigmoid\", \"tanh\"]\n",
        "}\n",
        "\n",
        "# Use standard scoring strings for simplicity where possible\n",
        "scoring = {\n",
        "    'accuracy': 'accuracy',  # Directly use string identifier\n",
        "    'precision': make_scorer(precision_score, average='macro', zero_division=0),\n",
        "    'recall': make_scorer(recall_score, average='macro', zero_division=0)\n",
        "}\n",
        "\n",
        "grid_search_cv = GridSearchCV(keras_classifier, param_grid, cv=3, verbose=2)\n",
        "grid_search_cv.fit(X_train_MLP, y_train_MLP, epochs=20)\n",
        "\n",
        "best_params = grid_search_cv.best_params_\n",
        "best_model = grid_search_cv.best_estimator_.model\n",
        "results = grid_search_cv.cv_results_\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "iRRr-GIurGNZ"
      },
      "id": "iRRr-GIurGNZ"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "L_Efji0f5tB7",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        },
        "id": "L_Efji0f5tB7",
        "outputId": "8f6437ed-d9ac-4d47-f587-c01ec1259486"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'best_params' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-2f02fb9e83ad>\u001b[0m in \u001b[0;36m<cell line: 7>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# MLP_best_model, MLP_best_params, CV_results = fully_conn_tuning(X_train_MLP, y_train_MLP)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbest_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'best_params' is not defined"
          ]
        }
      ],
      "source": [
        "#hyperparam tuning for fully connected model (MLP)\n",
        "#fully_conn_preprocess(X_train, Y_train, X_test, Y_test)\n",
        "\n",
        "# X_train_MLP, y_train_MLP,X_valid_MLP,y_valid_MLP = fully_conn_preprocess(X_train,y_train,X_test,y_test)\n",
        "\n",
        "# MLP_best_model, MLP_best_params, CV_results = fully_conn_tuning(X_train_MLP, y_train_MLP)\n",
        "print(best_params) #just lost them\n",
        "print(results)\n",
        "\n",
        "# print(\"Mean test accuracy for each parameter combination:\", results['mean_test_accuracy'])\n",
        "# print(\"Mean test precision for each parameter combination:\", results['mean_test_precision'])\n",
        "# print(\"Mean test recall for each parameter combination:\", results['mean_test_recall'])\n",
        "# print(\"Fully connected best parameters:\", MLP_best_params)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "57c76117",
      "metadata": {
        "id": "57c76117"
      },
      "source": [
        "### Convolutional neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "68eKw59i5urO",
      "metadata": {
        "id": "68eKw59i5urO"
      },
      "outputs": [],
      "source": [
        "from scipy.stats import uniform, randint\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "\n",
        "def conv_tuning(X_train, y_train):\n",
        "\n",
        "    #keras_classifier = KerasClassifier(build_fn=create_resnet50, input_shape=[28,28,3], num_classes=8)\n",
        "    keras_classifier = KerasClassifier(build_fn=convolutional_network, input_shape=[28,28,1], num_classes=11)\n",
        "\n",
        "    param_dist = {\n",
        "        \"optimizer__learning_rate\": uniform(0.0001, 0.1),\n",
        "        \"optimizer\": ['SGD', 'RMSprop', 'Adam', 'Adagrad'],\n",
        "        \"loss\": ['categorical_crossentropy'],\n",
        "        \"batch_size\": randint(16, 129)  # this will sample integers between 16 (inclusive) and 129 (exclusive)\n",
        "    }\n",
        "\n",
        "    random_search = RandomizedSearchCV(keras_classifier, param_distributions=param_dist, n_iter=50, cv=3, verbose=2)\n",
        "    random_search.fit(X_train, y_train)\n",
        "    best_params = random_search.best_params_\n",
        "    best_model = random_search.best_estimator_.model\n",
        "\n",
        "\n",
        "\n",
        "    return best_model, best_params"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train_CNN, y_train_CNN,X_valid_CNN,y_valid_CNN, X_test,y_test = convolutional_preprocess(X_train,y_train,X_test,y_test)\n",
        "\n",
        "best_model, best_params = conv_tuning(X_train, y_train)\n",
        "\n",
        "# Output the best parameters and optionally evaluate the model\n",
        "print(\"Best hyperparameters:\", best_params)\n",
        "#Best output hyperparameters: {'batch_size': 24, 'loss': 'categorical_crossentropy', 'optimizer': 'RMSprop', 'optimizer__learning_rate': 0.06146926284871222}\n",
        "\n",
        "# If you also have validation or test data prepared, evaluate the best model\n",
        "loss, accuracy = best_model.evaluate(X_valid, y_valid)  # or use X_test, y_test\n",
        "print(f\"Validation Loss: {loss:.4f}\")\n",
        "print(f\"Validation Accuracy: {accuracy:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "d2DRuRJ7jgaS",
        "outputId": "13ab9fa2-790a-431d-943c-4ab97e7376f3"
      },
      "id": "d2DRuRJ7jgaS",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 3 folds for each of 50 candidates, totalling 150 fits\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 332ms/step - accuracy: 0.5499 - loss: 1.4595\n",
            "\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 63ms/step\n",
            "[CV] END batch_size=119, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.06329846325087159; total time=  53.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 337ms/step - accuracy: 0.5436 - loss: 1.4964\n",
            "\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 91ms/step\n",
            "[CV] END batch_size=119, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.06329846325087159; total time= 1.4min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 343ms/step - accuracy: 0.5475 - loss: 1.4484\n",
            "\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 63ms/step\n",
            "[CV] END batch_size=119, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.06329846325087159; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m214/214\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 166ms/step - accuracy: 0.5759 - loss: 1.3546\n",
            "\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step\n",
            "[CV] END batch_size=59, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.07821347822203667; total time=  51.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m214/214\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 174ms/step - accuracy: 0.5725 - loss: 1.4163\n",
            "\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 48ms/step\n",
            "[CV] END batch_size=59, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.07821347822203667; total time=  48.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m214/214\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 173ms/step - accuracy: 0.5967 - loss: 1.3147\n",
            "\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 33ms/step\n",
            "[CV] END batch_size=59, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.07821347822203667; total time=  44.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m113/113\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 324ms/step - accuracy: 0.5286 - loss: 1.5039\n",
            "\u001b[1m57/57\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 60ms/step\n",
            "[CV] END batch_size=112, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.054639886179999084; total time=  45.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m113/113\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 317ms/step - accuracy: 0.5500 - loss: 1.4698\n",
            "\u001b[1m57/57\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 60ms/step\n",
            "[CV] END batch_size=112, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.054639886179999084; total time=  44.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m113/113\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 312ms/step - accuracy: 0.5407 - loss: 1.4891\n",
            "\u001b[1m57/57\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 60ms/step\n",
            "[CV] END batch_size=112, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.054639886179999084; total time=  51.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m122/122\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 310ms/step - accuracy: 0.5394 - loss: 1.4919\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 136ms/step\n",
            "[CV] END batch_size=104, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.05528071813073229; total time=  52.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m122/122\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m57s\u001b[0m 402ms/step - accuracy: 0.5660 - loss: 1.4168\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 97ms/step\n",
            "[CV] END batch_size=104, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.05528071813073229; total time= 1.7min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m122/122\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 321ms/step - accuracy: 0.5656 - loss: 1.4128\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 93ms/step\n",
            "[CV] END batch_size=104, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.05528071813073229; total time=  52.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m146/146\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m49s\u001b[0m 296ms/step - accuracy: 0.5515 - loss: 1.4998\n",
            "\u001b[1m73/73\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 47ms/step\n",
            "[CV] END batch_size=87, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.035369585337547395; total time=  52.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m146/146\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 261ms/step - accuracy: 0.5594 - loss: 1.4306\n",
            "\u001b[1m73/73\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 59ms/step\n",
            "[CV] END batch_size=87, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.035369585337547395; total time=  47.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m146/146\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m59s\u001b[0m 375ms/step - accuracy: 0.5552 - loss: 1.4392\n",
            "\u001b[1m73/73\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 98ms/step\n",
            "[CV] END batch_size=87, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.035369585337547395; total time= 1.1min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m112/112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m56s\u001b[0m 450ms/step - accuracy: 0.5461 - loss: 1.4400\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 90ms/step\n",
            "[CV] END batch_size=113, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.0003587781361354402; total time= 1.6min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m112/112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 376ms/step - accuracy: 0.5514 - loss: 1.4657\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 62ms/step\n",
            "[CV] END batch_size=113, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.0003587781361354402; total time=  52.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m112/112\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 335ms/step - accuracy: 0.5699 - loss: 1.3605\n",
            "\u001b[1m56/56\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 62ms/step\n",
            "[CV] END batch_size=113, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.0003587781361354402; total time=  50.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m65s\u001b[0m 423ms/step - accuracy: 0.5646 - loss: 1.4123\n",
            "\u001b[1m71/71\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 48ms/step\n",
            "[CV] END batch_size=90, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.02451825978906076; total time= 1.2min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 256ms/step - accuracy: 0.5510 - loss: 1.4969\n",
            "\u001b[1m71/71\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 48ms/step\n",
            "[CV] END batch_size=90, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.02451825978906076; total time=  45.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 254ms/step - accuracy: 0.5749 - loss: 1.3766\n",
            "\u001b[1m71/71\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 72ms/step\n",
            "[CV] END batch_size=90, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.02451825978906076; total time=  46.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m468/468\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 87ms/step - accuracy: 0.6352 - loss: 1.1704\n",
            "\u001b[1m234/234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 17ms/step\n",
            "[CV] END batch_size=27, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.06474181880046491; total time=  49.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m468/468\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m48s\u001b[0m 93ms/step - accuracy: 0.6360 - loss: 1.1808\n",
            "\u001b[1m234/234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 18ms/step\n",
            "[CV] END batch_size=27, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.06474181880046491; total time=  53.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m468/468\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m52s\u001b[0m 100ms/step - accuracy: 0.6449 - loss: 1.1341\n",
            "\u001b[1m234/234\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 18ms/step\n",
            "[CV] END batch_size=27, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.06474181880046491; total time= 1.5min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m146/146\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 251ms/step - accuracy: 0.5687 - loss: 1.3318\n",
            "\u001b[1m73/73\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 47ms/step\n",
            "[CV] END batch_size=87, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.07865146619898339; total time=  45.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m146/146\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 239ms/step - accuracy: 0.5689 - loss: 1.3981\n",
            "\u001b[1m73/73\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 51ms/step\n",
            "[CV] END batch_size=87, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.07865146619898339; total time=  51.1s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m146/146\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m53s\u001b[0m 301ms/step - accuracy: 0.5800 - loss: 1.3341\n",
            "\u001b[1m73/73\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 47ms/step\n",
            "[CV] END batch_size=87, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.07865146619898339; total time= 1.6min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m121/121\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 292ms/step - accuracy: 0.5497 - loss: 1.4343\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 57ms/step\n",
            "[CV] END batch_size=105, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.08337412601096286; total time=  49.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m121/121\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 300ms/step - accuracy: 0.5578 - loss: 1.4643\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 57ms/step\n",
            "[CV] END batch_size=105, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.08337412601096286; total time=  43.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m121/121\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 293ms/step - accuracy: 0.5724 - loss: 1.3805\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 56ms/step\n",
            "[CV] END batch_size=105, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.08337412601096286; total time=  45.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 328ms/step - accuracy: 0.5404 - loss: 1.5125\n",
            "\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 87ms/step\n",
            "[CV] END batch_size=119, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.037384637552831626; total time=  46.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 353ms/step - accuracy: 0.5563 - loss: 1.4542\n",
            "\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 64ms/step\n",
            "[CV] END batch_size=119, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.037384637552831626; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m107/107\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 325ms/step - accuracy: 0.5540 - loss: 1.4281\n",
            "\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 64ms/step\n",
            "[CV] END batch_size=119, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.037384637552831626; total time=  43.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m101/101\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 348ms/step - accuracy: 0.5440 - loss: 1.5209\n",
            "\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 66ms/step\n",
            "[CV] END batch_size=126, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.04388240789303965; total time=  49.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m101/101\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 354ms/step - accuracy: 0.5457 - loss: 1.4919\n",
            "\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 100ms/step\n",
            "[CV] END batch_size=126, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.04388240789303965; total time=  50.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m101/101\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 355ms/step - accuracy: 0.5463 - loss: 1.5132\n",
            "\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 66ms/step\n",
            "[CV] END batch_size=126, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.04388240789303965; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 321ms/step - accuracy: 0.5417 - loss: 1.4651\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 58ms/step\n",
            "[CV] END batch_size=106, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.06048669755529961; total time=  50.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 310ms/step - accuracy: 0.5624 - loss: 1.4271\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 68ms/step\n",
            "[CV] END batch_size=106, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.06048669755529961; total time=  50.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 312ms/step - accuracy: 0.5689 - loss: 1.3993\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 58ms/step\n",
            "[CV] END batch_size=106, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.06048669755529961; total time=  48.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m239/239\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 151ms/step - accuracy: 0.6016 - loss: 1.2350\n",
            "\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 42ms/step\n",
            "[CV] END batch_size=53, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.09918839497334811; total time=  51.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m239/239\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 154ms/step - accuracy: 0.5900 - loss: 1.3355\n",
            "\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 33ms/step\n",
            "[CV] END batch_size=53, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.09918839497334811; total time=  45.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m239/239\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 149ms/step - accuracy: 0.6083 - loss: 1.2533\n",
            "\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 48ms/step\n",
            "[CV] END batch_size=53, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.09918839497334811; total time=  50.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m361/361\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 106ms/step - accuracy: 0.6135 - loss: 1.2350\n",
            "\u001b[1m181/181\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 24ms/step\n",
            "[CV] END batch_size=35, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.017243105557673045; total time=  50.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m361/361\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 108ms/step - accuracy: 0.6025 - loss: 1.2811\n",
            "\u001b[1m181/181\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step\n",
            "[CV] END batch_size=35, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.017243105557673045; total time=  47.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m361/361\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 104ms/step - accuracy: 0.6323 - loss: 1.1831\n",
            "\u001b[1m181/181\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step\n",
            "[CV] END batch_size=35, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.017243105557673045; total time=  51.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m156/156\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 233ms/step - accuracy: 0.5639 - loss: 1.4433\n",
            "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 96ms/step\n",
            "[CV] END batch_size=81, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.05233004718849124; total time=  48.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m156/156\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 232ms/step - accuracy: 0.5731 - loss: 1.3546\n",
            "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 44ms/step\n",
            "[CV] END batch_size=81, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.05233004718849124; total time=  48.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m156/156\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 227ms/step - accuracy: 0.5698 - loss: 1.4059\n",
            "\u001b[1m78/78\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 62ms/step\n",
            "[CV] END batch_size=81, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.05233004718849124; total time=  48.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m173/173\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 215ms/step - accuracy: 0.5711 - loss: 1.4043\n",
            "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step\n",
            "[CV] END batch_size=73, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.032222590209558415; total time=  46.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m173/173\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 211ms/step - accuracy: 0.5596 - loss: 1.4485\n",
            "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 54ms/step\n",
            "[CV] END batch_size=73, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.032222590209558415; total time=  50.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m173/173\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 211ms/step - accuracy: 0.5852 - loss: 1.3493\n",
            "\u001b[1m87/87\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 40ms/step\n",
            "[CV] END batch_size=73, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.032222590209558415; total time=  48.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m169/169\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 207ms/step - accuracy: 0.5798 - loss: 1.3496\n",
            "\u001b[1m85/85\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 54ms/step\n",
            "[CV] END batch_size=75, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.029959071050191778; total time=  45.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m169/169\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 218ms/step - accuracy: 0.5677 - loss: 1.4061\n",
            "\u001b[1m85/85\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step\n",
            "[CV] END batch_size=75, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.029959071050191778; total time=  48.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m169/169\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 221ms/step - accuracy: 0.5725 - loss: 1.3710\n",
            "\u001b[1m85/85\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 61ms/step\n",
            "[CV] END batch_size=75, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.029959071050191778; total time=  55.1s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m178/178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 205ms/step - accuracy: 0.5749 - loss: 1.3913\n",
            "\u001b[1m89/89\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 57ms/step\n",
            "[CV] END batch_size=71, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.09940203118980327; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m178/178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 202ms/step - accuracy: 0.5874 - loss: 1.3039\n",
            "\u001b[1m89/89\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 40ms/step\n",
            "[CV] END batch_size=71, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.09940203118980327; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m178/178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 197ms/step - accuracy: 0.5935 - loss: 1.3221\n",
            "\u001b[1m89/89\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 40ms/step\n",
            "[CV] END batch_size=71, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.09940203118980327; total time=  49.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m230/230\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 169ms/step - accuracy: 0.6074 - loss: 1.2376\n",
            "\u001b[1m115/115\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step\n",
            "[CV] END batch_size=55, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.08122240428586143; total time=  47.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m230/230\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 164ms/step - accuracy: 0.5876 - loss: 1.3508\n",
            "\u001b[1m115/115\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 34ms/step\n",
            "[CV] END batch_size=55, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.08122240428586143; total time=  49.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m230/230\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 163ms/step - accuracy: 0.6141 - loss: 1.2243\n",
            "\u001b[1m115/115\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step\n",
            "[CV] END batch_size=55, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.08122240428586143; total time=  47.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m294/294\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 136ms/step - accuracy: 0.5937 - loss: 1.3196\n",
            "\u001b[1m147/147\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 26ms/step\n",
            "[CV] END batch_size=43, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.03766816665216431; total time=  49.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m294/294\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 132ms/step - accuracy: 0.6084 - loss: 1.2936\n",
            "\u001b[1m147/147\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 29ms/step\n",
            "[CV] END batch_size=43, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.03766816665216431; total time=  50.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m294/294\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 135ms/step - accuracy: 0.6141 - loss: 1.2644\n",
            "\u001b[1m147/147\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 26ms/step\n",
            "[CV] END batch_size=43, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.03766816665216431; total time=  48.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m122/122\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 286ms/step - accuracy: 0.5557 - loss: 1.4647\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 58ms/step\n",
            "[CV] END batch_size=104, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.09283947025210336; total time=  49.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m122/122\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 296ms/step - accuracy: 0.5419 - loss: 1.4573\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 84ms/step\n",
            "[CV] END batch_size=104, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.09283947025210336; total time=  50.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m122/122\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 287ms/step - accuracy: 0.5476 - loss: 1.5016\n",
            "\u001b[1m61/61\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 58ms/step\n",
            "[CV] END batch_size=104, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.09283947025210336; total time=  49.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m129/129\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 270ms/step - accuracy: 0.5523 - loss: 1.4434\n",
            "\u001b[1m65/65\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 72ms/step\n",
            "[CV] END batch_size=98, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.08298982481601483; total time=  44.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m129/129\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 274ms/step - accuracy: 0.5599 - loss: 1.4408\n",
            "\u001b[1m65/65\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 54ms/step\n",
            "[CV] END batch_size=98, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.08298982481601483; total time=  50.1s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m129/129\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 275ms/step - accuracy: 0.5737 - loss: 1.4702\n",
            "\u001b[1m65/65\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 68ms/step\n",
            "[CV] END batch_size=98, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.08298982481601483; total time=  46.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m115/115\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 304ms/step - accuracy: 0.5206 - loss: 1.5857\n",
            "\u001b[1m58/58\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 60ms/step\n",
            "[CV] END batch_size=110, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.07784586173222639; total time=  49.1s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m115/115\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 304ms/step - accuracy: 0.5509 - loss: 1.4618\n",
            "\u001b[1m58/58\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 90ms/step\n",
            "[CV] END batch_size=110, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.07784586173222639; total time=  47.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m115/115\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 309ms/step - accuracy: 0.5442 - loss: 1.4859\n",
            "\u001b[1m58/58\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 72ms/step\n",
            "[CV] END batch_size=110, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.07784586173222639; total time=  44.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m160/160\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 229ms/step - accuracy: 0.5769 - loss: 1.3701\n",
            "\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 44ms/step\n",
            "[CV] END batch_size=79, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.0730300702557358; total time=  48.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m160/160\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 227ms/step - accuracy: 0.5689 - loss: 1.4393\n",
            "\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 43ms/step\n",
            "[CV] END batch_size=79, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.0730300702557358; total time=  49.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m160/160\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 228ms/step - accuracy: 0.5729 - loss: 1.3812\n",
            "\u001b[1m80/80\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 44ms/step\n",
            "[CV] END batch_size=79, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.0730300702557358; total time=  44.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m99/99\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 347ms/step - accuracy: 0.5294 - loss: 1.4978\n",
            "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 68ms/step\n",
            "[CV] END batch_size=128, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.04031714533019453; total time=  43.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m99/99\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 348ms/step - accuracy: 0.5243 - loss: 1.6063\n",
            "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 69ms/step\n",
            "[CV] END batch_size=128, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.04031714533019453; total time=  51.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m99/99\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 355ms/step - accuracy: 0.5469 - loss: 1.5077\n",
            "\u001b[1m50/50\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 69ms/step\n",
            "[CV] END batch_size=128, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.04031714533019453; total time=  45.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 247ms/step - accuracy: 0.5605 - loss: 1.4369\n",
            "\u001b[1m71/71\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 69ms/step\n",
            "[CV] END batch_size=90, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.0856990614504669; total time=  49.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 260ms/step - accuracy: 0.5614 - loss: 1.4427\n",
            "\u001b[1m71/71\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 64ms/step\n",
            "[CV] END batch_size=90, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.0856990614504669; total time=  50.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 266ms/step - accuracy: 0.5739 - loss: 1.3839\n",
            "\u001b[1m71/71\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 48ms/step\n",
            "[CV] END batch_size=90, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.0856990614504669; total time=  46.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m281/281\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 134ms/step - accuracy: 0.6201 - loss: 1.2020\n",
            "\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 35ms/step\n",
            "[CV] END batch_size=45, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.011397741324549616; total time=  52.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m281/281\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 136ms/step - accuracy: 0.6213 - loss: 1.2257\n",
            "\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 27ms/step\n",
            "[CV] END batch_size=45, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.011397741324549616; total time=  47.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m281/281\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 135ms/step - accuracy: 0.6132 - loss: 1.2842\n",
            "\u001b[1m141/141\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 30ms/step\n",
            "[CV] END batch_size=45, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.011397741324549616; total time=  46.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m135/135\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 284ms/step - accuracy: 0.5580 - loss: 1.4264\n",
            "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 52ms/step\n",
            "[CV] END batch_size=94, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.09522855119271238; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m135/135\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 271ms/step - accuracy: 0.5685 - loss: 1.4157\n",
            "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 52ms/step\n",
            "[CV] END batch_size=94, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.09522855119271238; total time=  52.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m135/135\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 266ms/step - accuracy: 0.5734 - loss: 1.3860\n",
            "\u001b[1m68/68\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 53ms/step\n",
            "[CV] END batch_size=94, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.09522855119271238; total time=  49.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m195/195\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 192ms/step - accuracy: 0.5953 - loss: 1.2552\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step\n",
            "[CV] END batch_size=65, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.053251001846952625; total time=  50.1s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m195/195\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 186ms/step - accuracy: 0.5931 - loss: 1.3252\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step\n",
            "[CV] END batch_size=65, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.053251001846952625; total time=  49.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m195/195\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 194ms/step - accuracy: 0.5894 - loss: 1.3036\n",
            "\u001b[1m98/98\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 54ms/step\n",
            "[CV] END batch_size=65, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.053251001846952625; total time=  52.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 275ms/step - accuracy: 0.5477 - loss: 1.4478\n",
            "\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 53ms/step\n",
            "[CV] END batch_size=95, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.048515210001608314; total time=  44.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 268ms/step - accuracy: 0.5489 - loss: 1.4842\n",
            "\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 66ms/step\n",
            "[CV] END batch_size=95, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.048515210001608314; total time=  50.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m133/133\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 274ms/step - accuracy: 0.5717 - loss: 1.3929\n",
            "\u001b[1m67/67\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 53ms/step\n",
            "[CV] END batch_size=95, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.048515210001608314; total time=  50.1s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m189/189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 190ms/step - accuracy: 0.5761 - loss: 1.3671\n",
            "\u001b[1m95/95\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 50ms/step\n",
            "[CV] END batch_size=67, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.008866490716348806; total time=  45.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m189/189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 204ms/step - accuracy: 0.6078 - loss: 1.2716\n",
            "\u001b[1m95/95\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 37ms/step\n",
            "[CV] END batch_size=67, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.008866490716348806; total time=  46.1s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m189/189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 196ms/step - accuracy: 0.5836 - loss: 1.3508\n",
            "\u001b[1m95/95\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 38ms/step\n",
            "[CV] END batch_size=67, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.008866490716348806; total time=  44.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m154/154\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 237ms/step - accuracy: 0.5512 - loss: 1.4741\n",
            "\u001b[1m77/77\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 45ms/step\n",
            "[CV] END batch_size=82, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.06906614591251403; total time=  49.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m154/154\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 242ms/step - accuracy: 0.5699 - loss: 1.3886\n",
            "\u001b[1m77/77\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 45ms/step\n",
            "[CV] END batch_size=82, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.06906614591251403; total time=  44.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m154/154\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 237ms/step - accuracy: 0.5917 - loss: 1.3030\n",
            "\u001b[1m77/77\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 67ms/step\n",
            "[CV] END batch_size=82, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.06906614591251403; total time=  55.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m147/147\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 266ms/step - accuracy: 0.5589 - loss: 1.3886\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 72ms/step\n",
            "[CV] END batch_size=86, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.08953065769097936; total time=  55.1s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m147/147\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 252ms/step - accuracy: 0.5643 - loss: 1.3964\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 62ms/step\n",
            "[CV] END batch_size=86, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.08953065769097936; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m147/147\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m45s\u001b[0m 254ms/step - accuracy: 0.5740 - loss: 1.4151\n",
            "\u001b[1m74/74\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 48ms/step\n",
            "[CV] END batch_size=86, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.08953065769097936; total time=  50.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m101/101\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 348ms/step - accuracy: 0.5302 - loss: 1.5112\n",
            "\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 86ms/step\n",
            "[CV] END batch_size=125, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.025484401021932526; total time=  45.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m101/101\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 367ms/step - accuracy: 0.5402 - loss: 1.4732\n",
            "\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 69ms/step\n",
            "[CV] END batch_size=125, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.025484401021932526; total time=  48.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m101/101\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 351ms/step - accuracy: 0.5459 - loss: 1.5137\n",
            "\u001b[1m51/51\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 83ms/step\n",
            "[CV] END batch_size=125, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.025484401021932526; total time=  45.4s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m408/408\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m45s\u001b[0m 98ms/step - accuracy: 0.6183 - loss: 1.1834\n",
            "\u001b[1m204/204\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 20ms/step\n",
            "[CV] END batch_size=31, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.03873282697986588; total time=  50.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m408/408\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 98ms/step - accuracy: 0.6233 - loss: 1.2027\n",
            "\u001b[1m204/204\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 27ms/step\n",
            "[CV] END batch_size=31, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.03873282697986588; total time=  55.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m408/408\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 98ms/step - accuracy: 0.6355 - loss: 1.1545\n",
            "\u001b[1m204/204\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 24ms/step\n",
            "[CV] END batch_size=31, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.03873282697986588; total time=  55.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m351/351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 111ms/step - accuracy: 0.6226 - loss: 1.1848\n",
            "\u001b[1m176/176\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 26ms/step\n",
            "[CV] END batch_size=36, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.04692427956797773; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m351/351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 113ms/step - accuracy: 0.6371 - loss: 1.1697\n",
            "\u001b[1m176/176\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 22ms/step\n",
            "[CV] END batch_size=36, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.04692427956797773; total time=  50.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m351/351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 110ms/step - accuracy: 0.6326 - loss: 1.1689\n",
            "\u001b[1m176/176\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 31ms/step\n",
            "[CV] END batch_size=36, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.04692427956797773; total time=  51.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m230/230\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 163ms/step - accuracy: 0.5965 - loss: 1.2891\n",
            "\u001b[1m115/115\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 32ms/step\n",
            "[CV] END batch_size=55, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.05410137890997656; total time=  48.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m230/230\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 157ms/step - accuracy: 0.5955 - loss: 1.3083\n",
            "\u001b[1m115/115\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 41ms/step\n",
            "[CV] END batch_size=55, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.05410137890997656; total time=  45.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m230/230\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 159ms/step - accuracy: 0.5876 - loss: 1.3478\n",
            "\u001b[1m115/115\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 40ms/step\n",
            "[CV] END batch_size=55, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.05410137890997656; total time=  45.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 303ms/step - accuracy: 0.5581 - loss: 1.4175\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 58ms/step\n",
            "[CV] END batch_size=106, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.06381321229823646; total time=  44.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 310ms/step - accuracy: 0.5497 - loss: 1.4563\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 59ms/step\n",
            "[CV] END batch_size=106, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.06381321229823646; total time=  44.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m120/120\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 296ms/step - accuracy: 0.5492 - loss: 1.5014\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 70ms/step\n",
            "[CV] END batch_size=106, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.06381321229823646; total time=  45.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m361/361\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 108ms/step - accuracy: 0.6061 - loss: 1.2456\n",
            "\u001b[1m181/181\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 22ms/step\n",
            "[CV] END batch_size=35, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.09793149745716412; total time=  50.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m361/361\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 108ms/step - accuracy: 0.6173 - loss: 1.2173\n",
            "\u001b[1m181/181\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 30ms/step\n",
            "[CV] END batch_size=35, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.09793149745716412; total time=  53.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m361/361\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 109ms/step - accuracy: 0.6257 - loss: 1.1822\n",
            "\u001b[1m181/181\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 23ms/step\n",
            "[CV] END batch_size=35, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.09793149745716412; total time=  47.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 352ms/step - accuracy: 0.5306 - loss: 1.5414\n",
            "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 66ms/step\n",
            "[CV] END batch_size=121, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.006980777413720285; total time=  49.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 335ms/step - accuracy: 0.5463 - loss: 1.4768\n",
            "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 96ms/step\n",
            "[CV] END batch_size=121, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.006980777413720285; total time=  54.8s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m105/105\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 347ms/step - accuracy: 0.5604 - loss: 1.4102\n",
            "\u001b[1m53/53\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 67ms/step\n",
            "[CV] END batch_size=121, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.006980777413720285; total time=  44.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 344ms/step - accuracy: 0.5416 - loss: 1.4583\n",
            "\u001b[1m52/52\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 83ms/step\n",
            "[CV] END batch_size=123, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.04300300856265866; total time=  50.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 356ms/step - accuracy: 0.5301 - loss: 1.5885\n",
            "\u001b[1m52/52\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 68ms/step\n",
            "[CV] END batch_size=123, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.04300300856265866; total time=  48.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m103/103\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 354ms/step - accuracy: 0.5539 - loss: 1.4339\n",
            "\u001b[1m52/52\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 67ms/step\n",
            "[CV] END batch_size=123, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.04300300856265866; total time=  49.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m383/383\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 105ms/step - accuracy: 0.6271 - loss: 1.1895\n",
            "\u001b[1m192/192\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 29ms/step\n",
            "[CV] END batch_size=33, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.038322451107220504; total time=  54.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m383/383\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 104ms/step - accuracy: 0.6220 - loss: 1.2111\n",
            "\u001b[1m192/192\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 25ms/step\n",
            "[CV] END batch_size=33, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.038322451107220504; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m383/383\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 104ms/step - accuracy: 0.6289 - loss: 1.1709\n",
            "\u001b[1m192/192\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 21ms/step\n",
            "[CV] END batch_size=33, loss=categorical_crossentropy, optimizer=Adagrad, optimizer__learning_rate=0.038322451107220504; total time=  50.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m153/153\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 234ms/step - accuracy: 0.5619 - loss: 1.4413\n",
            "\u001b[1m77/77\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 46ms/step\n",
            "[CV] END batch_size=83, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.061752736095777964; total time=  44.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m153/153\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 230ms/step - accuracy: 0.5711 - loss: 1.3788\n",
            "\u001b[1m77/77\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 46ms/step\n",
            "[CV] END batch_size=83, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.061752736095777964; total time=  49.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m153/153\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 238ms/step - accuracy: 0.5595 - loss: 1.5011\n",
            "\u001b[1m77/77\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 60ms/step\n",
            "[CV] END batch_size=83, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.061752736095777964; total time=  49.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m108/108\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 320ms/step - accuracy: 0.5396 - loss: 1.4878\n",
            "\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 65ms/step\n",
            "[CV] END batch_size=117, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.009807436458137331; total time=  50.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m108/108\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 328ms/step - accuracy: 0.5564 - loss: 1.4133\n",
            "\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 96ms/step\n",
            "[CV] END batch_size=117, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.009807436458137331; total time=  50.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m108/108\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 344ms/step - accuracy: 0.5431 - loss: 1.5663\n",
            "\u001b[1m54/54\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 84ms/step\n",
            "[CV] END batch_size=117, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.009807436458137331; total time=  49.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m526/526\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 82ms/step - accuracy: 0.6497 - loss: 1.0923\n",
            "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 20ms/step\n",
            "[CV] END batch_size=24, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.06146926284871222; total time= 1.5min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m526/526\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 80ms/step - accuracy: 0.6275 - loss: 1.1853\n",
            "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 22ms/step\n",
            "[CV] END batch_size=24, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.06146926284871222; total time= 1.6min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m526/526\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 81ms/step - accuracy: 0.6325 - loss: 1.1744\n",
            "\u001b[1m263/263\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 16ms/step\n",
            "[CV] END batch_size=24, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.06146926284871222; total time= 1.5min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m169/169\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 229ms/step - accuracy: 0.5830 - loss: 1.3206\n",
            "\u001b[1m85/85\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 42ms/step\n",
            "[CV] END batch_size=75, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.0012191994680190942; total time=  46.3s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m169/169\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 209ms/step - accuracy: 0.5794 - loss: 1.3645\n",
            "\u001b[1m85/85\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 42ms/step\n",
            "[CV] END batch_size=75, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.0012191994680190942; total time=  49.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m169/169\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 216ms/step - accuracy: 0.5813 - loss: 1.3374\n",
            "\u001b[1m85/85\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 63ms/step\n",
            "[CV] END batch_size=75, loss=categorical_crossentropy, optimizer=SGD, optimizer__learning_rate=0.0012191994680190942; total time=  50.5s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m253/253\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 153ms/step - accuracy: 0.5990 - loss: 1.2875\n",
            "\u001b[1m127/127\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 30ms/step\n",
            "[CV] END batch_size=50, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.009512191145642657; total time=  48.9s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m253/253\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 146ms/step - accuracy: 0.6032 - loss: 1.3064\n",
            "\u001b[1m127/127\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 30ms/step\n",
            "[CV] END batch_size=50, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.009512191145642657; total time=  49.7s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m253/253\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m50s\u001b[0m 159ms/step - accuracy: 0.6164 - loss: 1.2144\n",
            "\u001b[1m127/127\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 31ms/step\n",
            "[CV] END batch_size=50, loss=categorical_crossentropy, optimizer=RMSprop, optimizer__learning_rate=0.009512191145642657; total time=  56.2s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m665/665\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m52s\u001b[0m 72ms/step - accuracy: 0.6424 - loss: 1.1318\n",
            "\u001b[1m333/333\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 17ms/step\n",
            "[CV] END batch_size=19, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.02255825298863843; total time= 1.5min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m665/665\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m50s\u001b[0m 70ms/step - accuracy: 0.6468 - loss: 1.1352\n",
            "\u001b[1m333/333\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 17ms/step\n",
            "[CV] END batch_size=19, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.02255825298863843; total time=  56.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m665/665\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m50s\u001b[0m 70ms/step - accuracy: 0.6486 - loss: 1.1152\n",
            "\u001b[1m333/333\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 18ms/step\n",
            "[CV] END batch_size=19, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.02255825298863843; total time= 1.6min\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m178/178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 205ms/step - accuracy: 0.5731 - loss: 1.3601\n",
            "\u001b[1m89/89\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step\n",
            "[CV] END batch_size=71, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.09005143320617255; total time=  50.6s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m178/178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 209ms/step - accuracy: 0.5770 - loss: 1.3719\n",
            "\u001b[1m89/89\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step\n",
            "[CV] END batch_size=71, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.09005143320617255; total time=  46.1s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m178/178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 201ms/step - accuracy: 0.5757 - loss: 1.4028\n",
            "\u001b[1m89/89\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 41ms/step\n",
            "[CV] END batch_size=71, loss=categorical_crossentropy, optimizer=Adam, optimizer__learning_rate=0.09005143320617255; total time=  51.0s\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/scikeras/wrappers.py:925: UserWarning: ``build_fn`` will be renamed to ``model`` in a future release, at which point use of ``build_fn`` will raise an Error instead.\n",
            "  X, y = self._initialize(X, y)\n",
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m789/789\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 81ms/step - accuracy: 0.6809 - loss: 0.9660\n",
            "Best hyperparameters: {'batch_size': 24, 'loss': 'categorical_crossentropy', 'optimizer': 'RMSprop', 'optimizer__learning_rate': 0.06146926284871222}\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'NoneType' object has no attribute 'evaluate'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-30-5d0d83b89c19>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;31m# If you also have validation or test data prepared, evaluate the best model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbest_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_valid\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_valid\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# or use X_test, y_test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Validation Loss: {loss:.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Validation Accuracy: {accuracy:.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'evaluate'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# If you also have validation or test data prepared, evaluate the best model\n",
        "loss, accuracy = best_model.evaluate(X_valid_CNN, y_valid_CNN)  # or use X_test, y_test\n",
        "print(f\"Validation Loss: {loss:.4f}\")\n",
        "print(f\"Validation Accuracy: {accuracy:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 198
        },
        "id": "bOWCiZrwHVDS",
        "outputId": "14e9f2b3-37b4-4f2c-b461-600f6133fd95"
      },
      "id": "bOWCiZrwHVDS",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'NoneType' object has no attribute 'evaluate'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-32-071a8107c01a>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# If you also have validation or test data prepared, evaluate the best model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbest_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_valid_CNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_valid_CNN\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# or use X_test, y_test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Validation Loss: {loss:.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Validation Accuracy: {accuracy:.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'NoneType' object has no attribute 'evaluate'"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "eead5c82",
      "metadata": {
        "id": "eead5c82"
      },
      "source": [
        "## 4. Final models\n",
        "In this section, please ensure to include cells to train each model with its best hyperparmater combination independently of the hyperparameter tuning cells, i.e. don't rely on the hyperparameter tuning cells having been run."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e1e56a6c",
      "metadata": {
        "id": "e1e56a6c"
      },
      "source": [
        "### Algorithm of choice from first six weeks of course"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "jyyqaUDBAdCV",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "jyyqaUDBAdCV",
        "outputId": "adeedbd8-cdd4-4701-c6c6-8ab0adc1003e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training for RF model took 127.63488411903381 seconds.\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Classification metrics can't handle a mix of multilabel-indicator and binary targets",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-41-102f01ff021a>\u001b[0m in \u001b[0;36m<cell line: 26>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbest_RF_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_rf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test_rf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0mf1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf1_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test_rf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maverage\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'micro'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0my_prob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbest_RF_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_rf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    211\u001b[0m                     )\n\u001b[1;32m    212\u001b[0m                 ):\n\u001b[0;32m--> 213\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    214\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInvalidParameterError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                 \u001b[0;31m# When the function is just a wrapper around an estimator, we allow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36maccuracy_score\u001b[0;34m(y_true, y_pred, normalize, sample_weight)\u001b[0m\n\u001b[1;32m    211\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m     \u001b[0;31m# Compute accuracy for each possible representation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 213\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    214\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"multilabel\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 94\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m     95\u001b[0m             \"Classification metrics can't handle a mix of {0} and {1} targets\".format(\n\u001b[1;32m     96\u001b[0m                 \u001b[0mtype_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype_pred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Classification metrics can't handle a mix of multilabel-indicator and binary targets"
          ]
        }
      ],
      "source": [
        "import time\n",
        "from sklearn import metrics\n",
        "final_RF_hyperparams = {\n",
        "    'criterion': 'entropy',\n",
        "    'max_depth': 30,\n",
        "    'n_estimators': 200}\n",
        "\n",
        "# test hyperparamter tuning fo RF classifier\n",
        "X_train_rf, y_train_rf,X_test_rf,y_test_rf = random_forest_preprocess(X_train,y_train,X_test,y_test)\n",
        "\n",
        "# Start measuring the time\n",
        "start_time = time.time()\n",
        "best_RF_model = create_random_forest_classifier(**final_RF_hyperparams)\n",
        "best_RF_history = best_RF_model.fit(X_train_rf, y_train_rf)\n",
        "\n",
        "# End measuring the time\n",
        "end_time = time.time()\n",
        "\n",
        "# Calculate the runtime\n",
        "rf_runtime = end_time - start_time\n",
        "print(f\"Training for RF model took {rf_runtime} seconds.\")\n",
        "\n",
        "\n",
        "\n",
        "y_pred = best_RF_model.predict(X_test)\n",
        "accuracy = accuracy_score(y_test_rf, y_pred) #not sure why it is not working now at the end\n",
        "f1 = metrics.f1_score(y_test_rf,y_pred,average='micro')\n",
        "y_prob = best_RF_model.predict_proba(X_test_rf)\n",
        "loss = metrics.log_loss(y_test_rf, y_prob)\n",
        "\n",
        "print(f\"Test Accuracy: {accuracy:.4f}\")\n",
        "print(f\"Test F1 score: {f1:.4f}\")\n",
        "print(f\"Test Loss: {loss:.4f}\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = best_RF_model.predict(X_test_rf)\n",
        "accuracy = accuracy_score(y_test_rf, y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 311
        },
        "id": "bEWyBUYbii8G",
        "outputId": "3868d4ca-4780-499d-9f30-21e81bee194f"
      },
      "id": "bEWyBUYbii8G",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Classification metrics can't handle a mix of multilabel-indicator and binary targets",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-44-cafa2e9e7dd8>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbest_RF_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_rf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test_rf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    211\u001b[0m                     )\n\u001b[1;32m    212\u001b[0m                 ):\n\u001b[0;32m--> 213\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    214\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInvalidParameterError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                 \u001b[0;31m# When the function is just a wrapper around an estimator, we allow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36maccuracy_score\u001b[0;34m(y_true, y_pred, normalize, sample_weight)\u001b[0m\n\u001b[1;32m    211\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m     \u001b[0;31m# Compute accuracy for each possible representation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 213\u001b[0;31m     \u001b[0my_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_check_targets\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    214\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0my_type\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"multilabel\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36m_check_targets\u001b[0;34m(y_true, y_pred)\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 94\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m     95\u001b[0m             \"Classification metrics can't handle a mix of {0} and {1} targets\".format(\n\u001b[1;32m     96\u001b[0m                 \u001b[0mtype_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtype_pred\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Classification metrics can't handle a mix of multilabel-indicator and binary targets"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4MYEZP0Vn7CF",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 860
        },
        "id": "4MYEZP0Vn7CF",
        "outputId": "17c9b878-9ea0-4567-d221-743c4ce95192"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 700x700 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "ename": "ValueError",
          "evalue": "multiclass format is not supported",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-39-e23f0691cb05>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmetrics_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbest_RF_model\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test_rf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test_rf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-38-03810c223b8e>\u001b[0m in \u001b[0;36mmetrics_plot\u001b[0;34m(model, X_test, y_test)\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;31m# Plot ROC curve\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0my_prob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m     \u001b[0mfpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mthresholds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mroc_curve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_prob\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m     \u001b[0mroc_auc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mauc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py\u001b[0m in \u001b[0;36mroc_curve\u001b[0;34m(y_true, y_score, pos_label, sample_weight, drop_intermediate)\u001b[0m\n\u001b[1;32m    990\u001b[0m     \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1.8\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;36m0.8\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;36m0.4\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;36m0.35\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.1\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    991\u001b[0m     \"\"\"\n\u001b[0;32m--> 992\u001b[0;31m     fps, tps, thresholds = _binary_clf_curve(\n\u001b[0m\u001b[1;32m    993\u001b[0m         \u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpos_label\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpos_label\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    994\u001b[0m     )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_ranking.py\u001b[0m in \u001b[0;36m_binary_clf_curve\u001b[0;34m(y_true, y_score, pos_label, sample_weight)\u001b[0m\n\u001b[1;32m    747\u001b[0m     \u001b[0my_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtype_of_target\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y_true\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    748\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my_type\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"binary\"\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0my_type\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"multiclass\"\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mpos_label\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 749\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"{0} format is not supported\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    750\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    751\u001b[0m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: multiclass format is not supported"
          ]
        }
      ],
      "source": [
        "metrics_plot(best_RF_model, X_test_rf, y_test_rf)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1L5_ywzup-Ts",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 619
        },
        "id": "1L5_ywzup-Ts",
        "outputId": "1df3e480-526a-4741-c665-3a0715930889"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1000x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "features_plot(best_RF_model, X_train_rf) #not really usefull so, we should delete this one"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fe676a86",
      "metadata": {
        "id": "fe676a86"
      },
      "source": [
        "### Fully connected neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "PUdFvDr8AiXQ",
      "metadata": {
        "id": "PUdFvDr8AiXQ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 948
        },
        "outputId": "8521b37d-b19f-4058-871d-430553773f52"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 15ms/step - accuracy: 0.2359 - loss: 2.3404 - val_accuracy: 0.2839 - val_loss: 2.1716\n",
            "Epoch 2/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 9ms/step - accuracy: 0.2518 - loss: 2.1186 - val_accuracy: 0.2913 - val_loss: 2.1129\n",
            "Epoch 3/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 10ms/step - accuracy: 0.2488 - loss: 2.1084 - val_accuracy: 0.3138 - val_loss: 2.0589\n",
            "Epoch 4/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - accuracy: 0.2699 - loss: 2.0473 - val_accuracy: 0.3146 - val_loss: 2.1142\n",
            "Epoch 5/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.2809 - loss: 2.0237 - val_accuracy: 0.3312 - val_loss: 2.0671\n",
            "Epoch 6/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.2702 - loss: 2.0353 - val_accuracy: 0.2882 - val_loss: 2.1986\n",
            "Epoch 7/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 13ms/step - accuracy: 0.2557 - loss: 2.0931 - val_accuracy: 0.2956 - val_loss: 2.1534\n",
            "Epoch 8/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 10ms/step - accuracy: 0.3029 - loss: 1.9820 - val_accuracy: 0.3891 - val_loss: 2.0882\n",
            "Epoch 9/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 10ms/step - accuracy: 0.3441 - loss: 1.9151 - val_accuracy: 0.2834 - val_loss: 2.1684\n",
            "Epoch 10/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 11ms/step - accuracy: 0.3267 - loss: 1.9747 - val_accuracy: 0.4118 - val_loss: 1.9346\n",
            "Epoch 11/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 5ms/step - accuracy: 0.3626 - loss: 1.8462 - val_accuracy: 0.4144 - val_loss: 1.8866\n",
            "Epoch 12/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 8ms/step - accuracy: 0.3689 - loss: 1.8346 - val_accuracy: 0.3928 - val_loss: 1.9900\n",
            "Epoch 13/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 5ms/step - accuracy: 0.3747 - loss: 1.8327 - val_accuracy: 0.4049 - val_loss: 1.9906\n",
            "Epoch 14/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.3601 - loss: 1.8422 - val_accuracy: 0.4120 - val_loss: 1.9817\n",
            "Epoch 15/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.3628 - loss: 1.8431 - val_accuracy: 0.4131 - val_loss: 1.9765\n",
            "Epoch 16/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 6ms/step - accuracy: 0.3690 - loss: 1.8489 - val_accuracy: 0.4046 - val_loss: 1.9669\n",
            "Epoch 17/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.3701 - loss: 1.8351 - val_accuracy: 0.4089 - val_loss: 1.8982\n",
            "Epoch 18/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.3708 - loss: 1.8367 - val_accuracy: 0.4134 - val_loss: 1.9585\n",
            "Epoch 19/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.3699 - loss: 1.8319 - val_accuracy: 0.4120 - val_loss: 2.0614\n",
            "Epoch 20/20\n",
            "\u001b[1m474/474\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 6ms/step - accuracy: 0.3717 - loss: 1.8690 - val_accuracy: 0.4065 - val_loss: 1.9888\n",
            "Training for MLP model took 87.57281994819641 seconds.\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'RandomForestClassifier' object has no attribute 'evaluate'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-50-29c5cd6b8334>\u001b[0m in \u001b[0;36m<cell line: 25>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;31m# Evaluate the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_mlp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test_mlp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test Loss: {loss:.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test Accuracy: {accuracy:.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'RandomForestClassifier' object has no attribute 'evaluate'"
          ]
        }
      ],
      "source": [
        "import time\n",
        "final_MLP_hyperparams = {\n",
        "    'criterion': 'sigmoid',\n",
        "    'max_depth': 30,\n",
        "    'n_estimators': 200,\n",
        "    }\n",
        "\n",
        "\n",
        "X_train_mlp, y_train_mlp, X_test_mlp, y_test_mlp  = fully_conn_preprocess(X_train, y_train, X_test, y_test)\n",
        "\n",
        "start_time = time.time()\n",
        "\n",
        "best_mlp_model = tunable_fully_network(n_hidden_layers=2, n_hidden_neurons=200,activation_function=\"relu\", input_shape=(784,), learning_rate=0.01)\n",
        "MLP_history = best_mlp_model.fit(X_train_mlp, y_train_mlp, epochs=20, batch_size=32, validation_split=0.2)\n",
        "# # best_MLP_history = best_mlp_model.fit(X_train_mlp, y_train_mlp, epochs=20, batch_size=32, validation_split=0.2) #needs hyperparam tuning to have been run\n",
        "# final_MLP_model = tunable_fully_network(**final_MLP_hyperparams)\n",
        "# End measuring the time\n",
        "end_time = time.time()\n",
        "\n",
        "# Calculate the runtime\n",
        "mlp_runtime = end_time - start_time\n",
        "print(f\"Training for MLP model took {mlp_runtime} seconds.\")\n",
        "\n",
        "# Evaluate the model\n",
        "loss, accuracy = model.evaluate(X_test_mlp, y_test_mlp)\n",
        "print(f\"Test Loss: {loss:.4f}\")\n",
        "print(f\"Test Accuracy: {accuracy:.4f}\")\n",
        "plot_training_acc(MLP_history)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "34c4ab78",
      "metadata": {
        "id": "34c4ab78"
      },
      "source": [
        "### Convolutional neural network"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "iN3nK359BIgA",
      "metadata": {
        "id": "iN3nK359BIgA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 966
        },
        "outputId": "fb136ffc-b849-4aec-8086-d4cf04004ea9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 78ms/step - accuracy: 0.4692 - loss: 2.6897 - val_accuracy: 0.6962 - val_loss: 1.2972\n",
            "Epoch 2/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 77ms/step - accuracy: 0.7431 - loss: 0.8142 - val_accuracy: 0.6532 - val_loss: 2.1673\n",
            "Epoch 3/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 81ms/step - accuracy: 0.7771 - loss: 0.7200 - val_accuracy: 0.7072 - val_loss: 1.4277\n",
            "Epoch 4/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 78ms/step - accuracy: 0.8008 - loss: 0.6481 - val_accuracy: 0.5974 - val_loss: 3.6268\n",
            "Epoch 5/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 84ms/step - accuracy: 0.8140 - loss: 0.6228 - val_accuracy: 0.8192 - val_loss: 0.6666\n",
            "Epoch 6/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 81ms/step - accuracy: 0.8227 - loss: 0.6117 - val_accuracy: 0.8302 - val_loss: 0.6823\n",
            "Epoch 7/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 77ms/step - accuracy: 0.8269 - loss: 0.5660 - val_accuracy: 0.6026 - val_loss: 3.8289\n",
            "Epoch 8/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m45s\u001b[0m 87ms/step - accuracy: 0.8319 - loss: 0.6101 - val_accuracy: 0.8374 - val_loss: 0.4831\n",
            "Epoch 9/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 77ms/step - accuracy: 0.8411 - loss: 0.5534 - val_accuracy: 0.7649 - val_loss: 1.4211\n",
            "Epoch 10/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 79ms/step - accuracy: 0.8421 - loss: 0.5239 - val_accuracy: 0.8302 - val_loss: 0.8716\n",
            "Epoch 11/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 83ms/step - accuracy: 0.8498 - loss: 0.5423 - val_accuracy: 0.7374 - val_loss: 0.9427\n",
            "Epoch 12/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 77ms/step - accuracy: 0.8550 - loss: 0.5098 - val_accuracy: 0.8343 - val_loss: 0.5596\n",
            "Epoch 13/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 81ms/step - accuracy: 0.8512 - loss: 0.5047 - val_accuracy: 0.8098 - val_loss: 0.8072\n",
            "Epoch 14/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m35s\u001b[0m 78ms/step - accuracy: 0.8515 - loss: 0.4962 - val_accuracy: 0.7419 - val_loss: 1.2603\n",
            "Epoch 15/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 78ms/step - accuracy: 0.8555 - loss: 0.5135 - val_accuracy: 0.7849 - val_loss: 0.6725\n",
            "Epoch 16/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 84ms/step - accuracy: 0.8548 - loss: 0.5019 - val_accuracy: 0.8468 - val_loss: 0.3960\n",
            "Epoch 17/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m36s\u001b[0m 81ms/step - accuracy: 0.8627 - loss: 0.4758 - val_accuracy: 0.8649 - val_loss: 0.4191\n",
            "Epoch 18/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 85ms/step - accuracy: 0.8562 - loss: 0.4894 - val_accuracy: 0.8909 - val_loss: 0.3518\n",
            "Epoch 19/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 79ms/step - accuracy: 0.8614 - loss: 0.4768 - val_accuracy: 0.8408 - val_loss: 0.9196\n",
            "Epoch 20/20\n",
            "\u001b[1m442/442\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 80ms/step - accuracy: 0.8630 - loss: 0.4767 - val_accuracy: 0.8638 - val_loss: 0.4723\n",
            "\u001b[1m178/178\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 19ms/step - accuracy: 0.8653 - loss: 0.4425\n",
            "Training for CNN model took 797.925240278244 seconds.\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'History' object has no attribute 'evaluate'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-c8ba152d6b8e>\u001b[0m in \u001b[0;36m<cell line: 33>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[0;31m# Evaluate the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcnn_history\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_CNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test_CNN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test Loss: {loss:.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Test Accuracy: {accuracy:.4f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'History' object has no attribute 'evaluate'"
          ]
        }
      ],
      "source": [
        "best_CNN_hyperparameters = {'batch_size': 24,\n",
        "                            'loss': 'categorical_crossentropy',\n",
        "                            'optimizer': 'RMSprop',\n",
        "                            'optimizer__learning_rate': 0.06146926284871222,\n",
        "                            }\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# best CNN model\n",
        "X_train_CNN, y_train_CNN,X_valid_CNN,y_valid_CNN,X_test_CNN,y_test_CNN = convolutional_preprocess(X_train,y_train,X_test,y_test)\n",
        "\n",
        "\n",
        "# Start measuring the time\n",
        "start_time = time.time()\n",
        "#adam actually appears to be better than selected RMSprop as hyperparm\n",
        "best_cnn_model = convolutional_network(input_shape=[28,28,1], num_classes=11, optimizer='RMSprop', learning_rate=0.06146926284871222, loss='categorical_crossentropy')\n",
        "\n",
        "cnn_history = best_cnn_model .fit(X_train_CNN, y_train_CNN, epochs=20, batch_size=24, validation_split=0.2)\n",
        "loss, accuracy = best_cnn_model .evaluate(X_valid_CNN, y_valid_CNN)\n",
        "\n",
        "\n",
        "# End measuring the time\n",
        "end_time = time.time()\n",
        "\n",
        "# Calculate the runtime\n",
        "cnn_runtime = end_time - start_time\n",
        "print(f\"Training for CNN model took {cnn_runtime} seconds.\")\n",
        "\n",
        "\n",
        "\n",
        "# Evaluate the model\n",
        "loss, accuracy = best_cnn_model.evaluate(X_test_CNN, y_test_CNN)\n",
        "print(f\"Test Loss: {loss:.4f}\")\n",
        "print(f\"Test Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "plot_accuracy(cnn_history)\n",
        "plot_loss(cnn_history)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluate the model\n",
        "loss, accuracy = model.evaluate(X_test_CNN, y_test_CNN)\n",
        "print(f\"Test Loss: {loss:.4f}\")\n",
        "print(f\"Test Accuracy: {accuracy:.4f}\")\n",
        "\n",
        "plot_accuracy(cnn_history)\n",
        "plot_loss(cnn_history)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "jgQKHi0KRlga",
        "outputId": "702295d3-0c87-4ca9-a9fb-9acf0f6cec3b"
      },
      "id": "jgQKHi0KRlga",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m148/148\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 62ms/step - accuracy: 0.8774 - loss: 0.3978\n",
            "Test Loss: 0.4393\n",
            "Test Accuracy: 0.8707\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "QXjUxJ50ZCwH",
      "metadata": {
        "id": "QXjUxJ50ZCwH"
      },
      "source": [
        "# Code for all the visuals\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "P8K5BCj-ZNVB",
      "metadata": {
        "id": "P8K5BCj-ZNVB"
      },
      "source": [
        "## Data histogram"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "hCBRKi7kZGqf",
      "metadata": {
        "id": "hCBRKi7kZGqf"
      },
      "outputs": [],
      "source": [
        "\n",
        "def plot_histogram(y_train, y_test, class_labels=None, title_suffix=''):\n",
        "    if class_labels is None:\n",
        "        class_labels = [str(i) for i in range(11)]  #10 classes\n",
        "\n",
        "    train_counts = [np.sum(y_train == i) for i in range(len(class_labels))]\n",
        "    test_counts = [np.sum(y_test == i) for i in range(len(class_labels))]\n",
        "\n",
        "    bar_width = 0.35\n",
        "    index = np.arange(len(class_labels))\n",
        "\n",
        "    plt.figure(figsize=(12, 6))\n",
        "\n",
        "\n",
        "    plt.bar(index, train_counts, bar_width, label='Training')\n",
        "    plt.bar(index + bar_width, test_counts, bar_width, label='Testing')\n",
        "\n",
        "    plt.xlabel('Class')\n",
        "    plt.ylabel('Count')\n",
        "    plt.title(f'Class Distribution in Training and Testing Data {title_suffix}')\n",
        "    plt.xticks(index + bar_width / 2, class_labels)\n",
        "\n",
        "\n",
        "    plt.legend()\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "HPef0dvTZcxy",
      "metadata": {
        "id": "HPef0dvTZcxy"
      },
      "source": [
        "## visualize dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "HcRn6knyZa_x",
      "metadata": {
        "id": "HcRn6knyZa_x"
      },
      "outputs": [],
      "source": [
        "\n",
        "def visualize_images(data, n_rows=4, n_cols=10):\n",
        "    plt.figure(figsize=(n_cols * 1.2, n_rows * 1.2))\n",
        "    for row in range(n_rows):\n",
        "        for col in range(n_cols):\n",
        "            index = n_cols * row + col\n",
        "\n",
        "            plt.subplot(n_rows, n_cols, index + 1)\n",
        "            plt.imshow(data[index], cmap=\"binary\", interpolation='nearest')\n",
        "            plt.axis('off')\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "wFOy9Qq0Z0yO",
      "metadata": {
        "id": "wFOy9Qq0Z0yO"
      },
      "outputs": [],
      "source": [
        "def plot_histogram_fancy(X_train, y_train):\n",
        "    classes = np.unique(y_train)\n",
        "    n_classes = len(classes)\n",
        "\n",
        "    plt.figure(figsize=(12, 8))\n",
        "\n",
        "    colors = plt.cm.viridis(np.linspace(0, 1, n_classes))\n",
        "\n",
        "    for i, class_id in enumerate(classes):\n",
        "        class_pixels = X_train[y_train == class_id].flatten()\n",
        "\n",
        "        plt.hist(class_pixels, bins=256, range=(0, 255), alpha=0.6, color=colors[i], label=f'Class {class_id}')\n",
        "\n",
        "    plt.title('Grayscale Pixel Intensity Distribution by Class', fontsize=15)\n",
        "    plt.xlabel('Grayscale Pixel Intensity', fontsize=12)\n",
        "    plt.ylabel('Frequency', fontsize=12)\n",
        "    plt.legend(title=\"Classes\", title_fontsize='13', fontsize='11')\n",
        "    plt.grid(True, linestyle='--', linewidth=0.5, alpha=0.75)\n",
        "    plt.xlim([0, 255])\n",
        "\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_sample_images(X, y, class_names, samples_per_class=11):\n",
        "    num_classes = len(class_names)\n",
        "    fig, axes = plt.subplots(nrows=num_classes, ncols=samples_per_class, figsize=(samples_per_class * 2, num_classes * 2))\n",
        "\n",
        "    for i in range(num_classes):\n",
        "        idxs = np.flatnonzero(y == i)\n",
        "        idxs = np.random.choice(idxs, samples_per_class, replace=False)\n",
        "        for j in range(samples_per_class):\n",
        "            ax = axes[i, j]\n",
        "            ax.imshow(X[idxs[j]], cmap='gray', aspect='auto')\n",
        "            ax.axis('off')\n",
        "            if j == 0:\n",
        "                ax.set_title(class_names[i])\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "gty3q0_Aq0FB"
      },
      "id": "gty3q0_Aq0FB",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "3qNzXAYSZVmy",
      "metadata": {
        "id": "3qNzXAYSZVmy"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "BwcZxbelkCBP",
      "metadata": {
        "id": "BwcZxbelkCBP"
      },
      "source": [
        "## Visualise metrics\n",
        "Below is the function to create various plots such as the ROC curve, fconfusion matrix and precision and recall curve for our 3 different models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "HTjzu4WKj8x6",
      "metadata": {
        "id": "HTjzu4WKj8x6"
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics import roc_curve, auc, precision_recall_curve, average_precision_score\n",
        "from sklearn.metrics import accuracy_score, f1_score, log_loss\n",
        "from sklearn.metrics import ConfusionMatrixDisplay\n",
        "\n",
        "def metrics_plot(model, X_test, y_test):\n",
        "\n",
        "\n",
        "    # Plot the confusion matrix\n",
        "    fig, ax = plt.subplots(figsize=(7, 7))\n",
        "    ConfusionMatrixDisplay.from_estimator(model, X_test, y_test, ax=ax, cmap=plt.cm.Blues)\n",
        "    plt.title('Confusion Matrix')\n",
        "    plt.show()\n",
        "\n",
        "    # Plot ROC curve\n",
        "    y_prob = model.predict_proba(X_test)[:,1]\n",
        "    fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n",
        "    roc_auc = auc(fpr, tpr)\n",
        "    plt.figure()\n",
        "    plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')\n",
        "    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n",
        "    plt.xlim([0.0, 1.0])\n",
        "    plt.ylim([0.0, 1.05])\n",
        "    plt.xlabel('False Positive Rate')\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
        "    plt.legend(loc=\"lower right\")\n",
        "    plt.show()\n",
        "\n",
        "    # Plot Precision-Recall curve\n",
        "    precision, recall, thresholds = precision_recall_curve(y_test, y_prob)\n",
        "    average_precision = average_precision_score(y_test, y_prob)\n",
        "    plt.figure()\n",
        "    plt.plot(recall, precision, lw=2, label=f'Precision-Recall curve (AP = {average_precision:.2f})')\n",
        "    plt.fill_between(recall, precision, step='post', alpha=0.2, color='b')\n",
        "    plt.xlabel('Recall')\n",
        "    plt.ylabel('Precision')\n",
        "    plt.title('Precision-Recall Curve')\n",
        "    plt.legend(loc=\"lower left\")\n",
        "    plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ACt2lv2EkfsX",
      "metadata": {
        "id": "ACt2lv2EkfsX"
      },
      "outputs": [],
      "source": [
        "\n",
        "def features_plot(model, X_train_rf):\n",
        "\n",
        "\n",
        "    importances = model.feature_importances_\n",
        "    indices = np.argsort(importances)[::-1]\n",
        "\n",
        "    # Create a DataFrame for the feature importances\n",
        "    features = [f\"Feature {i}\" for i in indices]  # Assuming no feature names available\n",
        "    importances_sorted = importances[indices]\n",
        "    importances_df = pd.DataFrame({'Features': features, 'Importance': importances_sorted})\n",
        "    importances_df.set_index('Features', inplace=True)\n",
        "\n",
        "    # Create the heatmap\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    sns.heatmap(importances_df.T, cmap='coolwarm', annot=True, cbar_kws={'label': 'Importance'})\n",
        "    plt.title(\"Feature Importances Heatmap\")\n",
        "    plt.xticks(rotation=45, ha=\"right\")\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "j6MaukGBp6EG",
      "metadata": {
        "id": "j6MaukGBp6EG"
      },
      "outputs": [],
      "source": [
        "def plot_training_acc(history):\n",
        "\n",
        "    accuracies = pd.DataFrame(history.history)[['accuracy', 'val_accuracy']]\n",
        "\n",
        "    # Plot the accuracies\n",
        "    accuracies.plot(figsize=(8, 5))\n",
        "    plt.grid(True)\n",
        "    plt.gca().set_ylim(0.8, 1)\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.title('Training and Validation Accuracy')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_accuracy(history):\n",
        "    accuracy = history.history['accuracy']\n",
        "    val_accuracy = history.history['val_accuracy']\n",
        "    epochs = range(len(accuracy))\n",
        "\n",
        "    plt.figure(figsize=(7, 5))\n",
        "    plt.plot(epochs, accuracy, label='Training accuracy')\n",
        "    plt.plot(epochs, val_accuracy, label='Validation accuracy')\n",
        "    plt.title('Training and validation accuracy')\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "def plot_loss(history):\n",
        "\n",
        "    loss = history.history['loss']\n",
        "    val_loss = history.history['val_loss']\n",
        "    epochs = range(len(loss))\n",
        "\n",
        "    plt.figure(figsize=(7, 5))\n",
        "    plt.plot(epochs, loss, label='Training loss')\n",
        "    plt.plot(epochs, val_loss, label='Validation loss')\n",
        "    plt.title('Training and validation loss')\n",
        "    plt.xlabel('Epochs')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.legend()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "LyGHy2C2N9C8"
      },
      "id": "LyGHy2C2N9C8",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "toc_visible": true,
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
